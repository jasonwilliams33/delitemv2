<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,delitemModalPubSub,spUtil,spAriaUtil,$uibModal) {
	/* widget controller */
	var c = this;

	//console.log(c);

	c.data.deliverySelected = false;
	c.data.delveryItemsSelected = false;
	c.data.selectedDeliveryItemArr = [];
	c.data.selectedDeliveryItemObj = {};
	c.data.sendSelectedDisabled = true;
	c.data.collectDeliveryDisabled = true;
	c.data.selectedDeliveryArr = [];
	$scope.currentPage = 0;
	$scope.rowsPerPage = 5;

	$scope.numberOfPages = function() {

		return Math.ceil($scope.c.data.list.length/$scope.rowsPerPage);

	};

	c.editForm = function(delivery) {
		
		var formOptions = {

			"delivery": delivery,
			"sys_id": delivery.sys_id,
			"table": c.data.options.table,
			"view": "Portal",
			"omitHeaderOptions": true,
			"hideRelatedLists": true,
			"disableUIActions": true,
			
		}
		
		c.modalInstance = $uibModal.open({

			templateUrl: 'delitem-custom-form-overlay.html',
			size: 'lg',
			backdrop: 'static',
			controllerAs: 'modalC',
			controller: function() {

				var modalC = this;
				modalC.modalInstance = c.modalInstance;
				modalC.title = "Edit Delivery Item";
				spUtil.get("edit_delivery_item",formOptions).then(function(response) {

					modalC.widget = response;

				})

			}	

		})
		
	}
	
		delitemModalPubSub.subscribe($scope, function($event, data) {//Subscription to Angular Provider to retrieve data from Modal and update relevant variables
		//alert(data.modalAction);
		console.log(data);
		c.modalInstance.close();


	})
	
	c.collectDelivery = function() {

		var modalReturnObj = {

			"modalAction" : "collectDelivery",
			"selectedDelivery" : c.data.selectedItem

		}

		delitemModalPubSub.publish(modalReturnObj);

		/*spUtil.get("delitem_delivery_summary", {

			deliverySysId: c.data.selectedItem.sys_id,
			deliveryItems: c.data.selectedItem.delivery_items.display_value,
			recipientFirstName: c.data.selectedItem.recipient.display_value

		}).then(function(response) {
			console.log(response);
			c.deliverySummaryWidget = response;

		});*/

	}

	/*c.collectDelivery = function() {

		try {

			c.data.embeddedAction = "retrieveDeliveryItems";
			c.server.update().then(function(){
			c.data.action = undefined;
				alert("i'm back");


		})

		/*c.server.get({

			action: "retrieveDeliveryItems",
			deliverySysId: c.data.selectedItem.sys_id
			//deliveryItems: c.data.selectedItem.delivery_items.display_value,
			//recipientFirstName: c.data.selectedItem.recipient.display_value

		}).then(function(rsp) {
console.log(rsp);
			c.data.deliverySummaryWidget = rsp.data.deliverySummaryWidget;

			c.data.retrievedDeliveryItemArr = rsp.data.retrievedDeliveryItemArr;
//console.log(c.data.retrievedDeliveryItemArr);
		})	

		c.data.deliverySelected = true;
	}catch(err){
		console.log("here it is: " + err);
	}
	}*/

	/*c.collect = function() {

		c.data.deliveryItemsSelected = true;
		console.log(c.data.selectedDeliveryItemArr);

	}*/

	c.selectDeliveryItem = function(sys_id) {

		var selectedItemIndex = c.data.selectedDeliveryItemArr.indexOf(sys_id);

		if(selectedItemIndex == -1) {

			c.data.selectedDeliveryItemArr.push(sys_id);


		} else {

			c.data.selectedDeliveryItemArr.splice(selectedItemIndex, 1);

		}

	}

	c.selectedSingleChange = function(e, data) {
		//console.log(data);
		//onsole.log("this is the lodash func: " + _.find(c.data.list, {'selected': true}));
		var selectedItem = _.find(c.data.list, {'selected': true});
		console.log(selectedItem);

		if(selectedItem) {

			c.data.collectDeliveryDisabled = false;
			c.data.selectedItem = data;			

			if(selectedItem.sys_id == data.sys_id) {
				c.data.disabled = false;
				return;

			}	else {

				_.find(c.data.list, {'sys_id': selectedItem.sys_id}).selected = false;
				_.find(c.data.list, {'sys_id': data.sys_id}).selected = true;			
				e.stopPropagation();
				e.preventDefault();

				return false;

			}		

		}		

	}

	c.selectedMultipleChange = function(sys_id) {

		var selectedItemIndex = c.data.selectedDeliveryArr.indexOf(sys_id);
		//console.log(sys_id);
		if(selectedItemIndex == -1) {

			c.data.selectedDeliveryArr.push(sys_id);

		} else {

			c.data.selectedDeliveryArr.splice(selectedItemIndex, 1);

		}

		if(c.data.selectedDeliveryArr.length > 0) { 

			c.data.sendSelectedDisabled = false;

		} else {

			c.data.sendSelectedDisabled = true;

		}
		console.log(c.data.selectedDeliveryArr);
	}

	c.sendReminders = function(action) {

		if(action == "all") {
			
			var allReminderArr = [];
			
			for(var i = 0; i < c.data.list.length; i++) {
				
				allReminderArr.push(c.data.list[i].sys_id);
				
			}

			c.data.selectedDeliveryArr = allReminderArr;

		}

		c.server.get({

			action: "sendReminders",
			selectedDeliveryArr: c.data.selectedDeliveryArr

		}).then(function(rsp) {

			var modalReturnObj = {

				"modalAction" : "remindersSent"

			}

			delitemModalPubSub.publish(modalReturnObj);

		})

	}

	c.cancel = function() {

		var modalReturnObj = {

			"modalAction" : "cancel"

		}

		delitemModalPubSub.publish(modalReturnObj);

	}

	c.selectedChange = function(e, data) {		

		var selectedItem = _.find(c.data.deliveriesArr, {'selected': true});

		if(selectedItem) {

			c.data.selectedItem = data;			

			if(selectedItem.sys_id == data.sys_id) {

				//c.data.selectedExisingPush = data;

				return;

			}	else {

				_.find(c.data.deliveriesArr, {'sys_id': selectedItem.sys_id}).selected = false;
				_.find(c.data.deliveriesArr, {'sys_id': data.sys_id}).selected = true;			
				//c.data.selectedExisingPush = _.find(c.data.pushArr, {'name': data.sys_id});
				e.stopPropagation();
				e.preventDefault();

				//c.data.selectedExisingPush = data;
				return false;

			}

		}
		console.log(c.data.selectedItem);
	}

	$scope.setOrderBy = function(field) {
		//alert(field);
		console.log(c.data);

		try {
			var d = "asc";
			// descending default sort for date/time columns for UI consistency
			var fieldType = c.data.column_types["recipient"];
			console.log(fieldType);
			if (fieldType == "glide_date_time" || fieldType == "glide_date") {
				d = "desc";
			}
			if (c.data.o == field) {
				if (c.data.d == "asc")
					d = "desc";
				else
					d = "asc";
			}

			if (d === "asc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc);
		} else if (d === "desc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc);
		}

			c.data.o = field;
			c.data.d = d;
			c.data.setOrderUserPreferences = true;
			//$scope.setSearch(true);

		} catch (err){
			console.log("JW Debug client: " + err);

		}
	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-heading{
  color: #fff;
  background-color: $brand-primary;
}

.headingText{
  text-align: center;
}

.btn span.glyphicon {    			
	opacity: 0;
}

.btn.active span.glyphicon {				
	opacity: 1;		
  color: #ffffff;
}

.btn.active{
  background: $brand-primary;
  color: #ffffff;
}

.radioLabels{
  margin: 10px;
}

.radioButtons{
	width: 100%;
}

.typeSelectionPanel,.confirmBtn,.radioButtons{
	margin-top: 20px !important;
}

.existingPush{
	margin-top: 10px;
}

.btn span.glyphicon {    			
	opacity: 0;
}

.btn.active span.glyphicon {				
	opacity: 1;		
  color: #ffffff;
}

.btn.active{
  background: $brand-primary;
  color: #ffffff;
}

.btn input{
	display:none;
}

.collectDelivery{
  margin-top: 10px;	
}

.outer{
	background-color: #ffffff;
  border: solid 1px;
}

.inner{
	background-color: $brand-primary;
  //background-image: linear-gradient(to right top, #1f8476, #22957f, #2ba686, #38b78c, #48c891);
  border: solid 1px;

}

.collectBtns{
	margin: 5px;
}

.headingText,.itemData{
	text-align: center;
  //color: #ffffff;
}

.th-title {
  display: inline-block;
  color: $primary;
}

.vfd1f4ec347730200ba13a5554ee490c0 .attachment-button .glyphicon-paperclip {
  color: red;
  display: none; 
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>delivery_table_modal</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl){
	var $ul, $contextMenu;

	scope.focusOnTableHeader = function() {
		element.find(".data-table-title").attr("tabindex", "-1").focus();
	}

	element.on('contextmenu', function(e){
		if (e.ctrlKey)
			return; // ctrlKey is for the debug menu, not this menu

		var rowScope = angular.element(e.target).scope();
		var field, item, fieldVal;

		// Context Menu for tbody
		if (angular.isDefined(rowScope.field) && angular.isDefined(rowScope.item)){
			e.preventDefault();
			field = rowScope.field;
			item = rowScope.item;
			fieldVal = item[field].value;

			var items = [
				['${Show Matching}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term){
						ctrl.showMatching(field, term);
					});
				}],
				['${Filter Out}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term){
						ctrl.filterOut(field, term);
					});
				}]
			];

			renderContextMenu(items);
			setContextMenuPosition(e);
		}
	});

	function renderContextMenu(items){
		var scrollHeight = $('body').get(0).scrollHeight;
		$contextMenu = angular.element('<div>', {'class': 'dropdown clearfix context-dropdown open'});

		$contextMenu.on('click', function (e) {
			if ($(e.target).hasClass('dropdown')) {
				_clearContextMenus(event);
			}
		});
		$contextMenu.on('contextmenu', function (event) {
			event.preventDefault();
			_clearContextMenus(event);
		});

		$contextMenu.css({
			position: 'absolute',
			top: 0,
			height: scrollHeight,
			left: 0,
			right: 0,
			zIndex: 9999
		});

		$('body').append($contextMenu);

		$ul = angular.element('<ul>', {
			'class': 'dropdown-menu',
			'role': 'menu'
		});
		renderItems();
		$contextMenu.append($ul);

		function renderItems(){
			angular.forEach(items, function (item) {
				var $li = angular.element('<li>');

				if (item === null) {
					$li.addClass('divider');
				} else {
					var $a = angular.element('<a>');
					$a.attr({tabindex: '-1', href:'#'});
					$a.text(item[0]);
					$li.append($a);
					$li.on('click', function (e) {
						e.preventDefault();
						scope.$apply(function () {
							_clearContextMenus(e);
							item[1].call(item, item);
						});
					});
				}

				$ul.append($li);
			});
		}
	}

	function _clearContextMenus(event){
		if (!event){
			return;
		}

		angular.element(event.currentTarget).removeClass('context');

		var els = angular.element(".context-dropdown");
		angular.forEach(els, function(el){
			angular.element(el).remove();
		});
	}

	var contextMenuItemHeight = 0;
	function setContextMenuPosition(event){
		if (contextMenuItemHeight === 0)
			contextMenuItemHeight = $ul.children(0).height();

		// Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow
		// that can cause IE10 to take 200ms to render a context menu.
		var cmWidth = 150;
		var cmHeight = contextMenuItemHeight * $ul.children().length;
		var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX;
		var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY;

		$ul.css({
			display: 'block',
			position: 'absolute',
			left: startX,
			top: startY,
			'min-width': cmWidth
		});
	}
}]]></link>
        <name>Delivery Table Modal</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	try {

		data.field_labels = [];
		data.options = input;
		data.fields_array = data.options.fields.split(',');
		console.log(data.fields_array);
		//data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
		//data.msg.sortingByDesc = gs.getMessage("Sorting by descending");
		//optCopy(input);

		//optCopy(data.options);
		
		
	data.msg = {};
	data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
	data.msg.sortingByDesc = gs.getMessage("Sorting by descending");

		var fieldLabelGRS = new GlideRecordSecure(data.options.table);
		for (var i in data.fields_array) {
			var field = data.fields_array[i];

			var fieldLableGe = fieldLabelGRS.getElement(field);
			if (fieldLableGe == null)
				continue;

			data.field_labels.push(fieldLableGe.getLabel());

		}

		var queryGRS = new GlideRecordSecure(data.options.table);
		queryGRS.addEncodedQuery(data.options.filter);
		queryGRS.query();
		data.list = [];

		while (queryGRS._next()) {
			var record = {};

			$sp.getRecordElements(record, queryGRS, data.options.fields);
			record.sys_id = queryGRS.getUniqueValue();
			record.number = queryGRS.number.toString();
			data.list.push(record);		

		}

		data.row_count = queryGRS.getRowCount();
		data.num_pages = Math.ceil(data.row_count / data.options.window_size);
		data.column_labels = {};
		data.column_types = {};

		var grForMetaData = new GlideRecord(data.options.table);

		// use GlideRecord to get field labels vs. GlideRecordSecure
		for (var i in data.fields_array) {
			var field = data.fields_array[i];
			var ge = grForMetaData.getElement(field);
			if (ge == null)
				continue;

			data.column_labels[field] = ge.getLabel();
			data.column_types[field] = ge.getED().getInternalType();

		}
	} catch (err){
		gs.error("JW Debug server: " + err);

	}
	/*
	data.options = input || '';
	data.deliveriesArr = [];
	data.retrievedDeliveryItemArr = [];
	data.deliverySummaryOptions = {};

	var deliveriesGR = new GlideRecordSecure(DelItemConstants.DELIVERY_TABLE);
	deliveriesGR.addEncodedQuery("state!=" + DelItemConstants.COLLECTED);
	deliveriesGR.query();
	while (deliveriesGR.next()) {

		var deliveriesObj = {};
		deliveriesObj.recipient = deliveriesGR.recipient.getDisplayValue();
		deliveriesObj.recipientFirstName = deliveriesGR.recipient.first_name.toString();
		deliveriesObj.deliveryItems = deliveriesGR.delivery_items_awaiting_collection.toString();
		deliveriesObj.created = deliveriesGR.sys_created_on.toString();
		deliveriesObj.sys_id = deliveriesGR.getUniqueValue();
		data.deliveriesArr.push(deliveriesObj);

	}

	///data.newDeliveryFilter = "date_receivedONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()";
	//data.delieveryItemTable = DelItemConstants.DELIVERY_ITEM_TABLE;
*/
	

	if(data.options.action == "todays" || data.options.action == "outstanding" || data.options.action == "expected") {

		data.displayDataTable = true;

	} else {

		data.displayDataTable = false;		

	}

	data.tableOptions = {

		"table": data.options.table,
		"filter": data.options.filter,
		"fields": data.options.fields,//"date_received,recipient,sender,collection_location,notes,state",
		"window_size": data.options.window_size,
		"hide_header": true

	};

	//data.customTableOptions = data.options;

	/*if(input) {
gs.error("JW Debug: widget " + JSON.stringify(data));
		data.deliverySummaryOptions = {

			"deliverySysId": input.deliverySysId,
			"deliveryItems": input.deliveryItems,
			"recipientFirstName": input.recipientFirstName

		};

		data.deliverySummaryWidget = $sp.getWidget("delitem_delivery_summary", data.deliverySummaryOptions);

	}*/

	/*if(input) {
		try {
			gs.error("JW Debug: widget " + JSON.stringify(data));
		console.log(input);


		data.deliverySummaryOptions = {

			"deliverySysId": input.deliverySysId,
			"deliveryItems": input.deliveryItems,
			"recipientFirstName": input.recipientFirstName

		};

		data.deliverySummaryWidget = $sp.getWidget("delitem_delivery_summary", data.deliverySummaryOptions);

		} catch(err) {
			gs.error("JW Debug: widget err: " + err);
		}
	}*/

	if(input && input.action == "sendReminders") {
		
		var sendReminders = new DelitemUtils().sendReminders(input.selectedDeliveryArr);

	}

	// getOrderColumn logic mirrors that of Desktop UI when no sort column is specified
	function getOrderColumn() {
		// First check for user preference
		var pref = gs.getUser().getPreference(data.table + ".db.order");
		if (!GlideStringUtil.nil(pref)) {
			data.o = pref;
			if (gs.getUser().getPreference(data.table + ".db.order.direction") == "DESC")
				data.d = 'desc';
			return;
		}

		// If no user pref, check for table default using same logic as Desktop UI:
		// 1) if task, use number
		// 2) if any field has isOrder attribute, use that
		// 3) use order, number, name column if exists (in that priority)
		if (grForMetaData.isValidField("sys_id") && grForMetaData.getElement("sys_id").getED().getFirstTableName() == "task") {
			data.o = "number";
			return;
		}

		// Next check for isOrder attribute on any column
		var elements = grForMetaData.getElements();
		// Global and scoped GlideRecord.getElements return two different things,
		// so convert to Array if needed before looping through
		if (typeof elements.size != "undefined") {
			var elementArr = [];
			for (var i = 0; i < elements.size(); i++)
				elementArr.push(elements.get(i));
			elements = elementArr;
		}
		// Now we can loop through
		for (var j = 0; elements.length > j; j++) {
			var element = elements[j];
			if (element.getAttribute("isOrder") == "true") {
				data.o = element.getName();
				return;
			}
		}
		// As last resort, sort on Order, Number, or Name column
		if (grForMetaData.isValidField("order"))
			data.o = "order";
		else if (grForMetaData.isValidField("number"))
			data.o = "number";
		else if (grForMetaData.isValidField("name"))
			data.o = "name";
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-14 10:42:15</sys_created_on>
        <sys_id>b8ffbccf2fdc2d10758993acf699b61d</sys_id>
        <sys_mod_count>247</sys_mod_count>
        <sys_name>Delivery Table Modal</sys_name>
        <sys_package display_value="Delitem" source="x_187394_delitem">ac22a5c32f771110758993acf699b6da</sys_package>
        <sys_policy/>
        <sys_scope display_value="Delitem">ac22a5c32f771110758993acf699b6da</sys_scope>
        <sys_update_name>sp_widget_b8ffbccf2fdc2d10758993acf699b61d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-12-18 17:28:00</sys_updated_on>
        <template><![CDATA[<div ng-show="!c.data.deliverySelected">
  <div ng-show="c.data.displayDataTable">
  <!--<widget id="data-table-from-url" options='data.tableOptions'></widget>-->
      <!--<div ng-include="'delitem-custom-data-table.html'"></div>-->
    
    <!------------------>
   <table class="table table-striped table-primary table-responsive table-bordered">
      <thead>
        <tr>
          <th class="itemData"
              ng-repeat="field in data.field_labels track by $index">
            <div class="th-title">
              {{field}}
            </div>  	
          </th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="delivery in c.data.list"
            ng-click="c.editForm(delivery)">
          <td ng-repeat="field in data.fields_array">
            {{::delivery[field].display_value}}
          </td>
        </tr>
    </table>
    <!------------------>
    
  </div>
  <div class="alert alert-info"
       ng-show="!c.data.displayDataTable && c.data.deliveriesArr.length == 0">
    There are currently Deliveries awaiting collection
  </div>
  <div class="panel panel-default"
       ng-show="!c.data.displayDataTable && data.list.length">
    <!--<div ng-include="'delitem-custom-data-table.html'"></div>-->
    <!--<table class="table table-striped table-primary table-responsive">
      <thead>
        <tr>
          <th class="itemData">Recipient</th> 
          <th class="itemData">Delivery Items</th>
          <th class="itemData">Created</th>
          <th class="itemData">Select</th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="delivery in c.data.deliveriesArr">
          <td class="itemData">{{delivery.recipient}}</td>
          <td class="itemData">{{delivery.deliveryItems}}</td>
          <td class="itemData">{{delivery.created}}</td>
          <td class="itemData">
            <div class="btn-group">			
              <label class="btn btn-default btn-sm" 
                     ng-click="c.selectedChange($event, delivery)"
                     ng-class="{'active': !!delivery.selected}">
                <input type="checkbox" name="singleCheck"
                       ng-model="delivery.selected"
                       >
                <span class="glyphicon glyphicon-ok"></span>
              </label>
            </div>
          </td>
        </tr>
    </table>-->
    <!--<widget id="delitem_data_table" options='data.customTableOptions'></widget>-->

    <table class="table table-striped table-primary table-responsive table-bordered" ng-if="data.list.length">
      <caption class="sr-only">{{data.title || data.table_plural}}</caption>
      <thead>
        <tr>
       <th ng-repeat="field in data.field_labels track by $index" class="text-nowrap" ng-click="setOrderBy(field)"
              scope="col" role="columnheader" aria-sort="{{field == data.o ? (data.d == 'asc'? 'ascending': 'descending') : 'none'}}">
            <div class="th-title" title="${Sort by} {{field == data.o ? (data.d == 'asc' ?  '${Descending}': '${Ascending}') : '${Ascending}'}}" role="button" tabindex="0" aria-label="{{data.column_labels[field]}}">{{field}}</div>
            <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]"></i>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="item in data.list track by item.sys_id"
            ng-if="($index < ((currentPage+1) * rowsPerPage)) && ($index >= (((currentPage+1) * rowsPerPage) - rowsPerPage))"
            >
          <td role="{{$first ? 'rowheader' : 'cell'}}" class="pointer sp-list-cell" ng-class="{selected: item.selected}" ng-click="go()" ng-repeat="field in ::data.fields_array" data-field="{{::field}}" data-th="{{::data.column_labels[field]}}"><a href="javascript:void(0)" ng-if="$first" aria-label="${Open record}: {{::item[field].display_value}}">{{::item[field].display_value | limitTo : item[field].limit}}{{::item[field].display_value.length > item[field].limit ? '...' : ''}}</a><span ng-if="!$first">{{::item[field].display_value | limitTo : item[field].limit}}{{::item[field].display_value.length > item[field].limit ? '...' : ''}}</span>
          </td>
          <td class="itemData">
            <div class="btn-group"
                 ng-show="c.data.options.checkBoxSelectFunction == 'single'">			
              <label class="btn btn-default btn-sm" 
                     ng-click="c.selectedSingleChange($event, item)"
                     ng-class="{'active': !!item.selected}"
                     ng-show="data.options.inlineCheckbox">
                <input type="checkbox" name="singleCheck"
                       ng-model="item.selected"
                       >
                <span class="glyphicon glyphicon-ok"></span>
              </label>
            </div>
            <div class="btn-group" data-toggle="buttons"
                 ng-show="c.data.options.checkBoxSelectFunction == 'multiple'">			
              <label class="btn btn-default btn-sm" 
                     ng-click="c.selectedMultipleChange(item.sys_id)"
                     ng-class="{'active': !!item.selected}"
                     ng-show="data.options.inlineCheckbox">
                <input type="checkbox" name="singleCheck"
                       ng-model="item.selected"
                       >
                <span class="glyphicon glyphicon-ok"></span>
              </label>
            </div>
            <div class="btn-group"
                 ng-show="item.state.value == 2 && c.data.options.inlineButton"
                 ng-click="c.confirmCollectionLocation(delivery)">			
              <button class="btn btn-primary">
                Received
              </button>
            </div>          
          </td>
        </tr>
      </tbody>
    </table>

  </div>
  <div>
    <button class="btn btn-primary btn-block collectDelivery"
            ng-click="c.collectDelivery()"
            ng-disabled="c.data.collectDeliveryDisabled"
            ng-show="!c.data.displayDataTable && c.data.options.action == 'collect_delivery'">
      Collect Delivery <i class="fa fa-pencil-square-o fa-lg" aria-hidden="true"></i>
    </button>
  </div>
  <div ng-show="c.data.options.action == 'send_reminders'">
    <button class=" btn btn-default collectBtns"
            ng-click="c.cancel()">
      Cancel
    </button>
    <button class="btn btn-primary collectBtns pull-right"
            ng-show="c.data.list.length > 1"
            ng-disabled="c.data.sendSelectedDisabled"
            ng-click="c.sendReminders('selected')">
      Send Selected
    </button> 
    <button class=" btn btn-primary collectBtns pull-right"
            ng-click="c.sendReminders('all')">
      Send <span ng-show="c.data.list.length > 1">All</span>
    </button>
  </div>
</div>

<div ng-show="c.data.deliverySelected && !c.data.delveryItemsSelected">
  <sp-widget widget="c.deliverySummaryWidget"></sp-widget>
</div>
]]></template>
    </sp_widget>
</record_update>
