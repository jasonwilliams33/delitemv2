<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,$uibModal,spUtil,delitemModalPubSub) {
	/* widget controller */
	var c = this;
	//console.log(c.data);
	c.data.collectDeliveryDisabled = true;
	c.data.deliveryReminderDisabled = true;

	if(c.data.outstandingDeliveryCount > 0) {

		c.data.collectDeliveryDisabled = false;
		c.data.deliveryReminderDisabled = false;

	}

	delitemModalPubSub.subscribe($scope, function($event, data) {//Subscription to Angular Provider to retrieve data from Modal and update relevant variables
		//alert(data.modalAction);
		//console.log(data);
		
		if(data.closeModal) {
			
			c.modalInstance.close();
			
		}

		if(data.modalAction == "sendNotifications") {

			spUtil.addInfoMessage("Notifications Sent!");

		} else if(data.modalAction == "remindersSent") {

			spUtil.addInfoMessage("Reminders Sent!");

		} else if(data.modalAction == "collectDelivery") {
			//alert('here');

			//console.log(data);
			c.openModal("delitem_delivery_summary","Outstanding Deliveries",data);

		} else if(data.modalAction === "signatureAccepted") {

			c.data.obj = data;
			c.server.get({

				action: "attachSignature",
				signature: data.signature,
				deliveryItems: c.data.selectedDeliveryItemArr,			

			}).then(function(rsp) {

			})
			
		} else if(data.modalAction === "edit_delivery") {
			
			c.openModal("edit_delivery_item","Edit Delivery Item", data);
			
		} else if(data.modalAction === "update_delivery") {
			
			c.server.get({

				action: "updateDeliveryItem",
				deliveryItem: data			

			}).then(function(rsp) {

			})
			
		}

	})

	spUtil.recordWatch($scope, c.data.delieveryItemTable, "", function(name,data) {

		c.server.get({

			action: "refreshDeliveryCounts"

		}).then(function(rsp) {

			c.data.todaysDeliveryCount = rsp.data.todaysDeliveryCount;
			c.data.expectedDeliveryCount = rsp.data.expectedDeliveryCount;
			c.data.outstandingDeliveryCount = rsp.data.outstandingDeliveryCount;

			if(c.data.outstandingDeliveryCount > 0) {

				c.data.collectDeliveryDisabled = false;
				c.data.deliveryReminderDisabled = false;

			} else {
				
				c.data.collectDeliveryDisabled = true;
				c.data.deliveryReminderDisabled = true;
				
			}

		})			

	});

	c.openDeliveryModal = function(action) {

		if(action == "todays") {

			c.data.deliveryModalFilter = c.data.todaysDeliveriesFilter;
			c.data.deliveryModalTitle = 'Delivery Items received today';
			c.data.deliveryModalTable = c.data.delieveryItemTable;
			//c.data.deliveryModalFields = ["date_received","recipient","sender","collection_location","notes","state"];
			c.data.deliveryModalFields = "date_received,recipient,sender,collection_location,notes,state";
			c.data.modalWidget = "delivery_table_modal";
			//c.data.modalWidget = "delitem_data_table";		
			c.data.inlineCheckbox = false;

		} else if(action == "expected") {

			c.data.deliveryModalFilter = c.data.expectedDeliveryItemsFilter;
			c.data.deliveryModalTitle = 'Expected Delivery Items';
			c.data.deliveryModalTable = c.data.delieveryItemTable;
			c.data.deliveryModalFields = "recipient,sender,notes,state";
			c.data.modalWidget = "delivery_table_modal";
			//c.data.modalWidget = "delitem_data_table";
			c.data.inlineCheckbox = false;

		} else if(action == "outstanding") {

			c.data.deliveryModalFilter = c.data.outstandingDeliveryItemsFilter;
			c.data.deliveryModalTitle = 'Outstanding Delivery Items';
			c.data.deliveryModalTable = c.data.delieveryItemTable;
			c.data.deliveryModalFields = "date_received,recipient,sender,collection_location,notes,state";
			c.data.modalWidget = "delivery_table_modal";
			//c.data.modalWidget = "delitem_data_table";
			c.data.inlineCheckbox = false;

		} else if(action == "collect_delivery") {

			c.data.deliveryModalFilter = c.data.outstandingDeliveryFilter;
			c.data.deliveryModalTitle = 'Outstanding Deliveries';
			c.data.deliveryModalTable = c.data.delieveryTable;
			c.data.deliveryModalFields = "recipient,delivery_items_awaiting_collection,sys_created_on";
			c.data.modalWidget = "delivery_table_modal";
			//c.data.modalWidget = "delitem_custom_data_table";
			c.data.inlineCheckbox = true;
			c.data.checkBoxSelectFunction = "single";
			c.data.tableAction = "collect_delivery";

		}

		else if(action == "send_reminders") {

			c.data.deliveryModalFilter = c.data.reminderFilter;

			c.data.deliveryModalTable = c.data.delieveryTable;
			c.data.deliveryModalFields = "recipient,delivery_items_awaiting_collection";
			c.data.modalWidget = "delivery_table_modal";
			//c.data.modalWidget = "delitem_data_table";
			c.data.inlineCheckbox = true;
			//	c.data.checkBoxSelectFunction = "single";
			c.data.deliveryModalTitle = 'Send Reminders';
			//c.data.modalWidget = "delitem_reminders";
			c.data.checkBoxSelectFunction = "multiple";
			c.data.tableAction = "reminders";

		}

		/*var widgetOptions = {

			"table": c.data.deliveryModalTable || "",	
			"filter": c.data.deliveryModalFilter || "",
			"fields": c.data.deliveryModalFields,
			"window_size": 5,
			"action": action

		}*/


		/*data.filter = "stateIN" + DelItemConstants.NEW + "," + DelItemConstants.EXPECTED;
	data.table = DelItemConstants.DELIVERY_ITEM_TABLE;
	//data.fields = ["date_received","recipient","sender","collection_location","notes","state"];
	data.fields = "date_received,recipient,sender,collection_location,notes,state";
	data.fields_array = data.fields.split(',');*/


		//data.button_label = "Placeholder"
		//data.inline_button = true;
		//data.inline_checkbox = false;

		var widgetOptions = {

			"table": c.data.deliveryModalTable,	
			"filter": c.data.deliveryModalFilter,
			"fields": c.data.deliveryModalFields,
			"window_size": 5,
			"action": action,
			"inlineButton" : false,
			"inlineCheckbox" : c.data.inlineCheckbox,
			"options" : ["table","filter","fields","window_size","action","inlineButton","inlineCheckbox","checkBoxSelectFunction","tableAction"],
			"checkBoxSelectFunction" : c.data.checkBoxSelectFunction,
			"tableAction" : c.data.tableAction

		}

		c.openModal(c.data.modalWidget,c.data.deliveryModalTitle,widgetOptions);

	}

	c.openModal = function(widget,title,modalObj) {
		console.log(modalObj);
		/***
	 	* Open Modal using supplied parameters
	 	***/

		c.modalInstance = $uibModal.open({

			templateUrl: 'delitem-custom-form-overlay.html',
			size: 'lg',
			backdrop: 'static',
			controllerAs: 'modalC',
			controller: function() {

				var modalC = this;
				modalC.modalInstance = c.modalInstance;
				modalC.title = title;
				spUtil.get(widget,modalObj).then(function(response) {

					modalC.widget = response;

				})

			}	

		})

	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>/*** Variables declaration **/

$border-radius: 6px;
$shadow: 0px 2px 10px rgba(23, 40, 52, 0.08);
$normal-img-size: 56px;
$small-img-size: 32px;
$rm: 10px;
$text-primary: #181a1f !default;
$color-sp-separator: #eaeaea !default;
$headings-font-weight: 600 !default;
$border-primary: #8790a1 !default;
$border-secondary: #acb2be !default;
$border-tertiary: #dadde2 !default;
$sp-panel-box-shadow: 0 4px 8px 0 rgba(23, 40, 52, 0.08) !default;

.wrap {
  justify-content: center;
  flex-wrap: wrap;
  display: flex;
}

.cardCount {
  padding: 10px;
  border-radius: 10px;
  width: 30%;
  margin-bottom: 2%;
  margin: 5px;
  flex: 0 1 auto;
  border: 1px solid rgb(221, 221, 221);
}

.wrap div:hover{
  background: #f7f7f7;
  -webkit-transition: background-color 250ms linear;
  -ms-transition: background-color 250ms linear;
  transition: background-color 250ms linear;
}

.docTitle, .content{
  margin: 5px;
  text-align: center;
}

.newDelivery{
  margin-top: 5px;
	width: 65%;
}

textarea {
  resize: none;
}

.btn{
	margin: 5px;
}

.collectBtns{
	margin: 5px;
  margin-top: 100px !important;
}

.vfd1f4ec347730200ba13a5554ee490c0 .attachment-button .glyphicon-paperclip {
  display: none; 
}



// ESC Styling
$text-primary: #181a1f !default;

.btn-default {
    color: #4f52bd;
    background-color: #ffffff;
    border-color: #4f52bd;
}

.panel-primary &gt; .panel-heading {
  background-color: transparent;
  color: $text-primary;
  	border-bottom: 1px solid $color-sp-separator;
  color: $text-primary;
  font-family: "Lato", sans-serif;
}

.b {
  border: 0;
    
}

.panel {
  box-shadow: $sp-panel-box-shadow;

}


</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>delitem</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Delitem</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	queryOutstandingDeliveries = function() {

		try {

			var outstandingDeliveries = new GlideAggregate(data.delieveryItemTable);
			outstandingDeliveries.addEncodedQuery(data.outstandingDeliveryItemsFilter);
			outstandingDeliveries.addAggregate('COUNT');
			outstandingDeliveries.query();
			while(outstandingDeliveries.next()) {

				return parseInt(outstandingDeliveries.getAggregate('COUNT'));

			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': Delitem Widget: queryOutstandingDeliveries - Caught error: \n'+err);

		}

	}

	queryTodaysDeliveries = function() {

		try {

			var todaysDeliveries = new GlideAggregate(data.delieveryItemTable);
			todaysDeliveries.addEncodedQuery(data.todaysDeliveriesFilter);
			todaysDeliveries.addAggregate('COUNT');
			todaysDeliveries.query();
			while(todaysDeliveries.next()) {

				return todaysDeliveries.getAggregate('COUNT');			

			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': Delitem Widget: queryTodaysDeliveries - Caught error: \n'+err);

		}

	}

	queryExpectedDeliveries = function() {

		try {

			var expectedDeliveries = new GlideAggregate(data.delieveryItemTable);
			expectedDeliveries.addEncodedQuery(data.expectedDeliveryItemsFilter);
			expectedDeliveries.addAggregate('COUNT');
			expectedDeliveries.query();
			while(expectedDeliveries.next()) {

				return expectedDeliveries.getAggregate('COUNT');

			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': Delitem Widget: queryExpectedDeliveries - Caught error: \n'+err);

		}
	}

	//if(!input) {

	retrieveMessages = function() {

		try {

			/*Message Retrieval*/
			data.deliveryItemsReceivedToday = gs.getMessage("DI Delivery Items received today");
			data.deliveryItemsExpectedToday = gs.getMessage("DI Delivery Items expected");
			data.deliveryItemsAwaitingCollection = gs.getMessage("DI Delivery Items awaiting collection");
			data.newDelivery = gs.getMessage("New Delivery");
			data.collectDelivery = gs.getMessage("DI Collect Delivery");
			data.sendReminders = gs.getMessage("DI Send Reminders");

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': Delitem Widget: retrieveMessages - Caught error: \n'+err);

		}

	}

	retrieveMessages();

	try {

		data.todaysDeliveriesFilter = "date_receivedONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^stateNOT IN" + DelItemConstants.EXPECTED + "," + DelItemConstants.CANCELLED;
		data.outstandingDeliveryItemsFilter = "state=" + DelItemConstants.AWAITING_COLLECTION;
		data.expectedDeliveryItemsFilter = "date_expectedONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^state=" + DelItemConstants.EXPECTED;
		data.outstandingDeliveryFilter = "stateNOT IN" + DelItemConstants.COLLECTED + "," + DelItemConstants.CANCELLED;
		data.delieveryItemTable = DelItemConstants.DELIVERY_ITEM_TABLE;
		data.delieveryTable = DelItemConstants.DELIVERY_TABLE;
		data.newDeliveryItem = DelItemConstants.NEW;
		data.expectedDeliveryItem = DelItemConstants.EXPECTED;
		data.selfService = gs.getProperty("x_187394_delitem.self.service");
		data.reminderFilter = "stateNOT IN" + DelItemConstants.COLLECTED + "," + DelItemConstants.CANCELLED;

		data.todaysDeliveryCount = queryTodaysDeliveries();
		data.expectedDeliveryCount = queryExpectedDeliveries();
		data.outstandingDeliveryCount = queryOutstandingDeliveries();

	} catch(err) {

		gs.error('['+gs.getCurrentScopeName()+']' + ': Delitem Widget: onLoad Script - Caught error: \n'+err);

	}

	//}

	if(input && input.action == "refreshDeliveryCounts") {

		try {

			data.todaysDeliveryCount = queryTodaysDeliveries();
			data.expectedDeliveryCount = queryExpectedDeliveries();
			data.outstandingDeliveryCount = queryOutstandingDeliveries();

		} catch (err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': Delitem Widget: refreshDeliveryCounts - Caught error: \n'+err);

		}

	}

	if(input && input.action == "signatureAccepted") {

		try {

			for(var i = 0; i < input.deliveryItems.length; i++) {

				var attach = new GlideRecordSecure(DelItemConstants.DELIVERY_ITEM_TABLE);
				attach.get(input.deliveryItems[i]);

				var dataUrl = input.signature.dataUrl;
				var dataUrlSplit = dataUrl.split('base64,');

				var attachment = new GlideSysAttachment();
				var attachmentSysId = attachment.writeBase64(attach, "signature.png", "image/png", dataUrlSplit[1]);

				attach.setValue('state',DelItemConstants.COLLECTED);
				attach.setValue('date_collected',new GlideDateTime());
				attach.setValue('recipient_signature',attachmentSysId);
				attach.update();

			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': widget - Caught error: \n'+err);

		}

	}

	if(input && input.action == "updateDeliveryItem") {
		try {
			var grsDeliveryItem = new GlideRecordSecure(data.delieveryItemTable);
			if(grsDeliveryItem.get(input.deliveryItem.deliveryItemSysId)){

				grsDeliveryItem.setValue('state',input.deliveryItem.delivery.state.value);
				//grsDeliveryItem.setValue('collection_location',input.deliveryItem.delivery.collectionLocation);
				if(input.deliveryItem.delivery.state.value == DelItemConstants.EXPECTED) {
					
					grsDeliveryItem.setValue('delivery','');
					grsDeliveryItem.collection_location = '';
					grsDeliveryItem.setValue('date_expected',input.deliveryItem.delivery.date_expected.value);
					
				} else {
					
					grsDeliveryItem.collection_location = input.deliveryItem.delivery.collectionLocation;
					grsDeliveryItem.setValue('date_expected','');
					
				}
				
				grsDeliveryItem.setValue('notes',input.deliveryItem.delivery.notes);
				
				grsDeliveryItem.update();
				gs.error("JW Debug, obj :" + JSON.stringify(input));
			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': widget - Caught error: \n'+err);

		}

	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-23 15:06:04</sys_created_on>
        <sys_id>7a5960082f0ce110758993acf699b611</sys_id>
        <sys_mod_count>190</sys_mod_count>
        <sys_name>Delitem</sys_name>
        <sys_package display_value="Delitem" source="x_187394_delitem">ac22a5c32f771110758993acf699b6da</sys_package>
        <sys_policy/>
        <sys_scope display_value="Delitem">ac22a5c32f771110758993acf699b6da</sys_scope>
        <sys_update_name>sp_widget_7a5960082f0ce110758993acf699b611</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-20 15:16:58</sys_updated_on>
        <template><![CDATA[<div class="panel panel-primary b">
  <div class="panel-heading">
    Delitem
  </div>
  <div class="panel-body">
    <div class="wrap row">
      <div class="cardCount"
           ng-click="c.openDeliveryModal('todays')">
       <h5 class="docTitle">
          {{data.deliveryItemsReceivedToday}}
        </h5>
        <div>
          <h4 class="content">
            {{data.todaysDeliveryCount}}
          </h4>
        </div>       
      </div>
       <div class="cardCount"
           ng-click="c.openDeliveryModal('expected')">
       <h5 class="docTitle">
          {{data.deliveryItemsExpectedToday}}
        </h5>
        <div>
          <h4 class="content">
            {{data.expectedDeliveryCount}}
          </h4>
        </div>       
      </div>
       <div class="cardCount"
           ng-click="c.openDeliveryModal('outstanding')">
        <h5 class="docTitle">
          {{data.deliveryItemsAwaitingCollection}}
        </h5>
         <div>
           <h4 class="content">
             {{data.outstandingDeliveryCount}}
           </h4>           
         </div>
      </div> 
    </div>
    <div class="wrap row">
      <button class="btn btn-primary newDelivery"
              ng-click="c.openModal('new_delivery','Add New Delivery Item(s)')">
        ${New Delivery} <i class="fa fa-dropbox fa-lg" aria-hidden="true"></i>
      </button>
    </div>
    <div class="wrap row"
                ng-show="c.data.selfService == 'false'">
      <button class="btn btn-default newDelivery"
              ng-click="c.openDeliveryModal('collect_delivery')"
              ng-disabled="c.data.collectDeliveryDisabled">
        {{data.collectDelivery}} <i class="fa fa-pencil-square-o fa-lg" aria-hidden="true"></i>
      </button>
    </div>
    <div class="wrap row">
      <button class="btn btn-default newDelivery"
              ng-click="c.openDeliveryModal('send_reminders')"
              ng-disabled="c.data.deliveryReminderDisabled">
       {{data.sendReminders}} <i class="fa fa-send-o fa-lg fa-fw" aria-hidden="true"></i>
      </button>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
