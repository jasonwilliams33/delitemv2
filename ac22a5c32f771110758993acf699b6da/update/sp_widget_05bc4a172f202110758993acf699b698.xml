<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,delitemModalPubSub) {
	/* widget controller */
	var c = this;
	
	console.log(c);
	//alert(c.data.options.selectedDelivery.sys_id);
	
	//c.data.modalAction = c.;modalAction
	
/*	if(c.data.selfService == "true") {
		console.log(c);
	} else {
	console.log(c);	
	}
	*/
	
		c.done = function(){

		var modalReturnObj = {

			"modalAction" : "signatureAccepted",
			"deliveryItems" : c.data.selectedDeliveryItemArr,
			"signature" : c.accept()

		}

		//c.data.signature = c.accept();
		delitemModalPubSub.publish(modalReturnObj);

	}
	
	c.data.selectedDeliveryItemArr = [];
	c.data.deliveryItemsSelected = false;
	
	c.data.disabled = true;
	
	c.selectDeliveryItem = function(sys_id) {

		var selectedItemIndex = c.data.selectedDeliveryItemArr.indexOf(sys_id);

		if(selectedItemIndex == -1) {

			c.data.selectedDeliveryItemArr.push(sys_id);


		} else {

			c.data.selectedDeliveryItemArr.splice(selectedItemIndex, 1);

		}
		
		if(c.data.selectedDeliveryItemArr.length > 0) { 
		
			c.data.disabled = false;
		
		} else {
			
			c.data.disabled = true;
			
		}
		
	}

	c.collect = function(action) {

		if(action == "all") {
			
			c.data.selectedDeliveryItemArr = c.data.retrievedDeliveryItemSysIdArr;
			
		}
		
		c.data.deliveryItemsSelected = true;

	}
	
	c.cancel = function() {
		
		var modalReturnObj = {
				
				"modalAction" : "cancel"
			
			}
		
		delitemModalPubSub.publish(modalReturnObj);
		
	}

	delitemModalPubSub.subscribe($scope, function($event, data) {
//console.log(data);
		c.data.obj = data;
		c.server.get({

			action: "attachSignature",
			signature: data.signature,
			deliveryItems: c.data.selectedDeliveryItemArr,			

		}).then(function(rsp) {
			
		})	

		c.data.deliveryItemsSelected = false;

	});

};]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-heading{
  color: #fff;
  background-color: $brand-primary;
}

.headingText{
  text-align: center;
}

.btn span.glyphicon {    			
	opacity: 0;
}

.btn.active span.glyphicon {				
	opacity: 1;		
  color: #ffffff;
}

.btn.active{
  background: $brand-primary;
  color: #ffffff;
}

.btn span.glyphicon {    			
	opacity: 0;
}

.btn.active span.glyphicon {				
	opacity: 1;		
  color: #ffffff;
}

.btn.active{
  background: $brand-primary;
  color: #ffffff;
}


.btn input{
	display:none;
}

.collectDelivery{
  margin-top: 10px;	
}

.outer{
	background-color: #ffffff;
  border: solid 1px;
}

.inner{
	background-color: $brand-primary;
  border-radius: 5px;
  //background-image: linear-gradient(to right top, #1f8476, #22957f, #2ba686, #38b78c, #48c891);
  border: solid 1px;

}

.collectBtns{
	margin: 5px;
  margin-top: 10px;
}

.headingText{
	text-align: center;
  color: #ffffff;
}

/////////////

.signature-main-div {
  margin: 50px;
  margin-top: 10px;
  border-radius: 6px;
  .signature {
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 20px;
  }
  .signature canvas {
    border: 1px solid #ddd;
    border-radius: 6px;
    margin: 0 auto;
    cursor: pointer;
    height: 150px !important;
    width: 350px !important;
  }
}

/*.scratch-pad{
	margin: 25px;
}*/

.img{
  display: block;
  margin-left: auto;
  margin-right: auto;  
  margin-bottom: 20px;
}

h3,h4,p{
text-align: center;
}

.signatureBtns{
  float: right;
  margin: 5px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>delitem_delivery_summary</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Delitem Delivery Summary</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	try {

		data.selfService = gs.getProperty("x_187394_delitem.self.service");
		//c.data.thisistheinput = input;
		//	if(data.selfService == "false") {
		data.options = input || '';
		//}
		var deliverySysId;

		//gs.error("JW Debug, delivery Sys ID: " + JSON.stringify(data));

		if(data.selfService == "true") {
			
			deliverySysId = data.options.sys_id;
			data.recipientFirstName = data.options.recipientFirstName;
			data.deliveryItems = data.options.delivery_items_awaiting_collection.value;
				
		} else {
			
			deliverySysId = data.options.selectedDelivery.sys_id;
			data.recipientFirstName = data.options.selectedDelivery.recipientFirstName;
			data.deliveryItems = data.options.selectedDelivery.delivery_items_awaiting_collection.value;
			
		}
		
		gs.error("JW Debug, delivery Sys ID: " + deliverySysId);
		
		

		/*if(data.selfService == "false") {

		deliverySysId = options.deliverySysId;
		data.recipientFirstName = options.recipientFirstName;
		data.deliveryItems = options.deliveryItems;

	} else {

		deliverySysId = data.options.deliverySysId;
		data.recipientFirstName = data.options.recipientFirstName;
		data.deliveryItems = parseInt(data.options.deliveryItems);

	}*/

		data.retrievedDeliveryItemArr = [];
		data.retrievedDeliveryItemSysIdArr = [];
		data.multipleItems = false;

		//gs.error("JW Debug, delivery Sys ID: " + data.deliveryItems);



		var deliveryItemGR = new GlideRecordSecure(DelItemConstants.DELIVERY_ITEM_TABLE);
		deliveryItemGR.addEncodedQuery("stateNOT IN" + DelItemConstants.COLLECTED + "," + DelItemConstants.CANCELLED + "^delivery=" + deliverySysId);
		deliveryItemGR.query();
		while(deliveryItemGR.next()) {
gs.error("JW Debug, Delivery items found");
			data.retrievedDeliveryItemObj = {};
			data.retrievedDeliveryItemObj.date_received = deliveryItemGR.date_received.toString();
			data.retrievedDeliveryItemObj.sender = deliveryItemGR.sender.toString() || "N/A";
			data.retrievedDeliveryItemObj.notes = deliveryItemGR.notes.toString() || "N/A";
			data.retrievedDeliveryItemObj.collection_location = deliveryItemGR.collection_location.toString();
			data.retrievedDeliveryItemObj.sys_id = deliveryItemGR.getUniqueValue();
			data.retrievedDeliveryItemArr.push(data.retrievedDeliveryItemObj);
			data.retrievedDeliveryItemSysIdArr.push(deliveryItemGR.getUniqueValue());
			data.recipientFirstName = deliveryItemGR.recipient.first_name.toString();

		}
gs.error("JW Debug, Delivery items found: " + data.deliveryItems );
		if(deliveryItemGR.getRowCount() > 1) {

			data.multipleItems = true;

		}

	} catch(err) {

		gs.error('['+gs.getCurrentScopeName()+']' + ': Summary widget - Caught error: \n'+err);

	}

	if(input ) {

		try {
			gs.error("JW Debug, delivery widgetInput: " + JSON.stringify(data));
			for(var i = 0; i < input.deliveryItems.length; i++) {

				var attach = new GlideRecordSecure(DelItemConstants.DELIVERY_ITEM_TABLE);
				attach.get(input.deliveryItems[i]);

				var dataUrl = input.signature.dataUrl;
				var dataUrlSplit = dataUrl.split('base64,');

				var attachment = new GlideSysAttachment();
				var attachmentSysId = attachment.writeBase64(attach, "signature.png", "image/png", dataUrlSplit[1]);

				attach.setValue('state',DelItemConstants.COLLECTED);
				attach.setValue('date_collected',new GlideDateTime());
				attach.setValue('recipient_signature',attachmentSysId);
				attach.update();

			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': widget - Caught error: \n'+err);

		}

	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-27 21:11:45</sys_created_on>
        <sys_id>05bc4a172f202110758993acf699b698</sys_id>
        <sys_mod_count>77</sys_mod_count>
        <sys_name>Delitem Delivery Summary</sys_name>
        <sys_package display_value="Delitem" source="x_187394_delitem">ac22a5c32f771110758993acf699b6da</sys_package>
        <sys_policy/>
        <sys_scope display_value="Delitem">ac22a5c32f771110758993acf699b6da</sys_scope>
        <sys_update_name>sp_widget_05bc4a172f202110758993acf699b698</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-08 13:32:26</sys_updated_on>
        <template><![CDATA[<div class="jumbotron inner">
  <h3 class="headingText"
      ng-show="!c.data.deliveryItemsSelected">
    Hi {{c.data.recipientFirstName}},<br><br>You have {{c.data.deliveryItems}} x Delivery Item<span ng-show="c.options.deliveryItems > 1">s</span> awaiting collection:<br>
  </h3>
  <h3 class="headingText"
      ng-show="c.data.deliveryItemsSelected">
		Add your signature below to collect your <span ng-show="c.data.selectedDeliveryItemArr.length > 1">{{c.data.selectedDeliveryItemArr.length}} x selected items</span><span ng-show="c.data.selectedDeliveryItemArr.length == 1">selected item</span><br>
  </h3>
</div>

<div class="panel panel-default"
     ng-show="!c.data.deliveryItemsSelected">
  <table class="table table-striped table-primary table-responsive">
    <thead>
      <tr>
        <th>${Date Received}</th> 
        <th>Collection Location</th>
        <th>Sender</th>
        <th>Notes</th>        
        <th ng-show="c.data.selectedItem.deliveryItems > 1">Select</th>
      </tr>
    </thead>
    <tbody>
      <tr ng-repeat="delivery in c.data.retrievedDeliveryItemArr">
        <td>{{delivery.date_received}}</td>
        <td>{{delivery.collection_location}}</td>
        <td>{{delivery.sender}}</td>
        <td>{{delivery.notes}}</td>
        <td ng-show="c.data.multipleItems">
          <div class="btn-group" data-toggle="buttons">	
            <label class="btn btn-default btn-sm" 
                   ng-click="c.selectDeliveryItem(delivery.sys_id)"
                   ng-class="{'active': !!delivery.selected}">
              <input type="checkbox" name="singleCheck">
              <span class="glyphicon glyphicon-ok"></span>
            </label>
          </div>          
        </td>
      </tr>
  </table>  
</div>
<div ng-show="!c.data.deliveryItemsSelected">
       <button class=" btn btn-default collectBtns"
          ng-click="c.cancel()">
    Cancel
  </button>
      <button class="btn btn-primary collectBtns pull-right"
          ng-show="c.data.multipleItems"
          ng-disabled="c.data.disabled"
          ng-click="c.collect('selected')">
    Collect Selected
  </button> 
  <button class=" btn btn-primary collectBtns pull-right"
          ng-click="c.collect('all')">
    Collect <span ng-show="c.data.multipleItems">All</span>
  </button>
    </div>
<div ng-show="c.data.deliveryItemsSelected">
  <!--<widget id="delitem_scratch_pad"></widget>-->
  <div class="panel panel-default">
  <div class="panel-body">  
    <div class="signature-main-div">
      <!--<img ng-if="c.data.companyLogo != ''" class="img" src="{{c.data.companyLogo}}" width="97.5" height="47.3"/>-->
      <h3>
        {{c.data.options.visitor_name.display_value}}
      </h3>
      <h4>
        {{c.date}}
      </h4>
      <p>
        Please sign below and click 'Accept Signature' when completed:
      </p>
      <scratch-pad class="scratch-pad" accept="c.accept" clear="clear" height="150" width="350"></scratch-pad>  
      <button class="btn signatureBtns btn-primary" ng-click="c.done()">Accept signature</button>
      <button class="btn signatureBtns btn-default" ng-click="clear()">Clear signature</button>
    </div>
  </div>
</div>
</div>]]></template>
    </sp_widget>
</record_update>
