<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_187394_delitem.DelitemUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>DelitemUtils</name>
        <script><![CDATA[var DelitemUtils = Class.create();
DelitemUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	addDeliveryItem : function(itemObj) {

		try {

			var newDeliveryItemGRS = new GlideRecordSecure(DelItemConstants.DELIVERY_ITEM_TABLE);
			newDeliveryItemGRS.initialize();
			newDeliveryItemGRS.setValue('recipient',itemObj.recipient.value);

			if(itemObj.collection_location != undefined) {

				newDeliveryItemGRS.setValue('collection_location',itemObj.collection_location);

			}

			if(itemObj.notes != undefined) {

				newDeliveryItemGRS.setValue('notes',itemObj.notes);

			}

			if(itemObj.sender != undefined) {

				newDeliveryItemGRS.setValue('sender',itemObj.sender);

			}

			newDeliveryItem = newDeliveryItemGRS.insert();

			return newDeliveryItem;

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': DelitemUtils: addDeliveryItem - Caught error: \n'+err);

		}

	},

	addMultipleDeliveryItem : function(itemObj) {

		try {

			var multipleDeliveryItemArr = itemObj.recipient.value.split(",");

			for (var i=0; i< multipleDeliveryItemArr.length; i++) {

				var multipleItemObj = {

					"recipient": {"value": multipleDeliveryItemArr[i]},
					"collection_location": itemObj.collection_location

				};

				var newDeliveryItem = this.addDeliveryItem(multipleItemObj);

			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': DelitemUtils: addMultipleDeliveryItem - Caught error: \n'+err);

		}

	},

	sendNotifications : function() {

		try {

			var newDeliveryItemArr = [];
			var	newDeliveryItemObj = {};
			var deliveryArr = [];

			var newDeliveryItems = new GlideAggregate(DelItemConstants.DELIVERY_ITEM_TABLE);
			newDeliveryItems.addEncodedQuery('state=1^delivery=NULL^ORdelivery=undefined');
			newDeliveryItems.groupBy('recipient');
			// 			newDeliveryItems.groupBy('sys_id');
			newDeliveryItems.addAggregate('COUNT');
			newDeliveryItems.query();
			while(newDeliveryItems.next()) {

				newDeliveryItemObj = {};
				newDeliveryItemObj.recipient = newDeliveryItems.recipient.getDisplayValue().toString();
				newDeliveryItemObj.recipientSysId = newDeliveryItems.recipient.toString();
				newDeliveryItemObj.recipientFirsName = newDeliveryItems.recipient.first_name.toString();
				// 				newDeliveryItemObj.deliveryItemSysId = newDeliveryItems.sys_id.toString();
				newDeliveryItemObj.date = new GlideDateTime();
				newDeliveryItemObj.count = newDeliveryItems.getAggregate('COUNT');
				newDeliveryItemArr.push(newDeliveryItemObj);

			}

			var existingDeliveryArr = this.checkAndUpdateExistingDelivery(newDeliveryItemArr);

			for (var i=0; i< existingDeliveryArr.length; i++) {

				if(!existingDeliveryArr[i].existingDelivery) {

					existingDeliveryArr[i].deliveryRecord = this.createNewDelivery(existingDeliveryArr[i]);

					//this.updateExistingDelivery(existingDeliveryArr[i]);

				}

				

			}

			for (var j=0; j< existingDeliveryArr.length; j++) {

				if(existingDeliveryArr[j].existingDelivery) {
				
					deliveryArr.push(existingDeliveryArr[j].deliveryRecord);
					
				} else {
					
				deliveryArr.push(existingDeliveryArr[j].deliveryRecord.newDeliveryRecord);
					
				}

			}

			var updatedDeliveryItems = this.updateDeliveryItems(existingDeliveryArr);

			var notificationEvents = this.generateNotificationEvents(existingDeliveryArr);
			
			return deliveryArr;

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': DelitemUtils: sendNotifications - Caught error: \n'+err);

		}

	},

	checkAndUpdateExistingDelivery : function(deliveryItemArr) {
		//gs.error("JW Debug deliveryItemArr: " + typeof(deliveryItemArr));
		//global.JSUtil.logObject(deliveryItemArr,"JW Debug");
		try {

			for (var i=0; i< deliveryItemArr.length; i++) {

				var exisitingDeliveryGRS = new GlideRecordSecure(DelItemConstants.DELIVERY_TABLE);
				exisitingDeliveryGRS.addEncodedQuery('state!=3^recipient=' + deliveryItemArr[i].recipientSysId);
				exisitingDeliveryGRS.query();
				if(exisitingDeliveryGRS.next()){

					deliveryItemArr[i].existingDelivery = true;
					deliveryItemArr[i].deliveryRecord = exisitingDeliveryGRS.getUniqueValue();
					exisitingDeliveryGRS.setValue('delivery_items',parseInt(exisitingDeliveryGRS.delivery_items) + parseInt(deliveryItemArr[i].count));
					exisitingDeliveryGRS.setValue('delivery_items_awaiting_collection',parseInt(exisitingDeliveryGRS.delivery_items_awaiting_collection) + parseInt(deliveryItemArr[i].count));
					exisitingDeliveryGRS.update();

				} else {

					deliveryItemArr[i].existingDelivery = false;

				}

			}

			return deliveryItemArr;

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': DelitemUtils: checkExistingDelivery - Caught error: \n'+err);

		}

	},

	createNewDelivery : function(newDelivery) {

		try {

			var createNewDeliveryGRS = new GlideRecordSecure(DelItemConstants.DELIVERY_TABLE);
			createNewDeliveryGRS.initialize();
			createNewDeliveryGRS.setValue('delivery_items',parseInt(newDelivery.count));
			createNewDeliveryGRS.setValue('delivery_items_awaiting_collection',parseInt(newDelivery.count));
			createNewDeliveryGRS.setValue('recipient',newDelivery.recipientSysId);

			newDelivery.newDeliveryRecord = createNewDeliveryGRS.insert();

			return newDelivery;

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': DelitemUtils: createNewDelivery - Caught error: \n'+err);

		}

	},

	updateDeliveryItems : function(existingDeliveryArr) {
		
		try {

			for (var i=0; i< existingDeliveryArr.length; i++) {

				var deliverySysId = existingDeliveryArr[i].deliveryRecord;

				if(!existingDeliveryArr[i].existingDelivery) {

					deliverySysId = existingDeliveryArr[i].deliveryRecord.newDeliveryRecord;

				}

				existingDeliveryArr[i].senderStr = '';

				var updatingDeliveryItemGRS = new GlideRecordSecure(DelItemConstants.DELIVERY_ITEM_TABLE);
				updatingDeliveryItemGRS.addEncodedQuery("recipient=" + existingDeliveryArr[i].recipientSysId + "^delivery=NULL^ORdelivery=undefined");
				updatingDeliveryItemGRS.query();
				while(updatingDeliveryItemGRS.next()) {

					if(updatingDeliveryItemGRS.sender != '' && updatingDeliveryItemGRS.sender != undefined) {

						existingDeliveryArr[i].senderStr += updatingDeliveryItemGRS.sender.toString() + ',';


					}

					updatingDeliveryItemGRS.setValue('delivery',deliverySysId);
					updatingDeliveryItemGRS.setValue('state',2);
					updatingDeliveryItemGRS.update();

				}

			}

		} catch(err) {

			gs.error('['+gs.getCurrentScopeName()+']' + ': DelitemUtils: updateDeliveryItems - Caught error: \n'+err);

		}

	},

	generateNotificationEvents : function(existingDeliveryArr) {

		for (var i=0; i< existingDeliveryArr.length; i++) {
		 
			existingDeliveryArr[i].senderStr = existingDeliveryArr[i].senderStr.replace(/,\s*$/, "");

			var body = "Hi " + existingDeliveryArr[i].recipientFirsName + ",\nYou have a new delivery";

			if(existingDeliveryArr[i].senderStr != '' && existingDeliveryArr[i].count == 1) {

				body += " from " + existingDeliveryArr[i].senderStr;//.replace(/,\s*$/, "");

			} else if(existingDeliveryArr[i].senderStr != '' && existingDeliveryArr[i].count > 1 && existingDeliveryArr[i].senderStr.split(",").length == 1) {

				body += " including items from " + existingDeliveryArr[i].senderStr.split(",")[0];

			} else if(existingDeliveryArr[i].senderStr != '' && existingDeliveryArr[i].count > 1 && existingDeliveryArr[i].senderStr.split(",").length > 1) {

				body += " including items from " + existingDeliveryArr[i].senderStr.split(",")[0] + " & " + existingDeliveryArr[i].senderStr.split(",")[1];

			}

			body += ".\nPlease collect from Reception at your earliest convenience.";

			gs.eventQueue('x_187394_delitem.delivery.notification',current,existingDeliveryArr[i].recipientSysId,body);
		 
		}		 

	},

	lookupReminderDelivery : function(reminderDelivery) {

		var reminderDeliveryObj = {};

		var reminderDeliveryGRS = new GlideRecordSecure(DelItemConstants.DELIVERY_TABLE);
		if(reminderDeliveryGRS.get(reminderDelivery)) {

			reminderDeliveryObj = {};
			reminderDeliveryObj.recipient = reminderDeliveryGRS.recipient.getDisplayValue().toString();
			reminderDeliveryObj.recipientSysId = reminderDeliveryGRS.recipient.toString();
			reminderDeliveryObj.recipientFirsName = reminderDeliveryGRS.recipient.first_name.toString();
			reminderDeliveryObj.outstanding_delivery_items = parseInt(reminderDeliveryGRS.delivery_items_awaiting_collection);
			
			return reminderDeliveryObj;

		}		

	},

	sendReminders : function(reminderArr) {
		
		try {

			if(!Array.isArray(reminderArr)) {

				reminderArr = reminderArr.split(',');

			}

		var sendReminderArr = [];
		var notificationBody = "";

		for (var i=0; i< reminderArr.length; i++) {
			gs.error("JW Debug: SI loop" + reminderArr[i]);
			//sendReminderArr.push(this.lookupReminderDelivery(reminderArr[i]));
			var reminderObj = this.lookupReminderDelivery(reminderArr[i]);

			notificationBody = "Hi " + reminderObj.recipientFirsName + ',\nYou have ';

			if(reminderObj.outstanding_delivery_items > 1) {

				notificationBody += reminderObj.outstanding_delivery_items + " x delivery items ";

			} else {

				notificationBody += "a delivery item ";

			}

			notificationBody += "awaiting collection.\nPlease collect from Reception at your earliest convenience."

			gs.eventQueue('x_187394_delitem.delivery.notification',current,reminderObj.recipientSysId,notificationBody);
		 
		}		 

		//gs.error("JW Debug: " + JSON.stringify(notificationBody));

	} catch(err) {

		gs.error('['+gs.getCurrentScopeName()+']' + ': DelitemUtils: sendReminders - Caught error: \n'+err);

	}		 

	},

	type: 'DelitemUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-10 15:13:14</sys_created_on>
        <sys_id>2b7615312f182910758993acf699b6c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DelitemUtils</sys_name>
        <sys_package display_value="Delitem" source="x_187394_delitem">ac22a5c32f771110758993acf699b6da</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Delitem">ac22a5c32f771110758993acf699b6da</sys_scope>
        <sys_update_name>sys_script_include_2b7615312f182910758993acf699b6c4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-02-20 22:26:59</sys_updated_on>
    </sys_script_include>
</record_update>
