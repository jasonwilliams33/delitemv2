<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,spUtil,$timeout,delitemModalPubSub,spModal,$uibModal) {
	/* widget controller */

	var c = this;

	c.data.singleItem = false;
	c.data.multipleItems = true;
	c.data.showItemForm = false;
	c.data.missingFields = '';
	c.missingFieldsError = '';
	c.data.showLocationUpdate = false;

	if(c.data.newDeliveryCount > 0) {

		c.data.disabled = false;

	} else {

		c.data.disabled = true;

	}

	c.editForm = function(delivery) {
console.log(c.data.newDeliveryGRSArr);
		//console.log("This is the record: " + _.find(c.data.list, {sys_id:delivery.sys_id}));

		var deliveryObj = {

			"modalAction": "edit_delivery",
			"delivery": _.find(c.data.newDeliveryGRSArr, {sys_id:delivery.sys_id})

		}
console.log(deliveryObj);
		delitemModalPubSub.publish(deliveryObj);

	}

	c.insertItems = function(saveAction) {
		//console.log(c.data.recipient.value.split(','));
		c.data.itemCount = c.data.recipient.value.split(',').length;

		if(c.data.itemCount > 1) {

			c.data.action = "insertMultipleDeliveryItems"

		} else {

			c.data.action = "insertDeliveryItem"

		}

		c.server.get({

			action: c.data.action,
			recipient: c.data.recipient,
			sender: c.data.senderAutoComplete,
			collection_location: c.data.collectionLocation,
			notes: c.data.notes			

		}).then(function(rsp) {

			c.data.recipient = {displayValue: '',value: ''};
			c.data.senderAutoComplete = '';
			c.data.collectionLocation = '';
			c.data.notes = '';

			if(saveAction == 'saveAndClose') {

				c.data.showItemForm = false

			}

		})

	}

	c.generateErrorString = function(fullString) {

		var string = fullString.replace(/,\s*$/, "");
		var return_string = '';
		var split_string = string.split(',');

		if (split_string.length == 1) {

			return_string = string;

		} else {

			return_string = string.replace(/,/g, " & ");

		}

		return return_string;

	}

	c.saveItem = function(saveAction) {

		if((c.data.recipient.value == undefined || c.data.recipient.value == '') && saveAction != "confirmLocation") {

			c.data.missingFields += 'Recipient,';

		}

		if(c.data.collectionLocation == undefined || c.data.collectionLocation == '') {

			c.data.missingFields += 'Collection Location,';

		}

		if(c.data.missingFields != '') {

			c.data.missingFieldsError = c.generateErrorString(c.data.missingFields);
			c.data.missingFields = '';
			c.data.showError = true;

			$timeout(function() {

				c.data.showError = false;
				c.data.missingFields = '';
				c.data.missingFieldsError = '';

			},3000);

			return;

		}

		else {

			if(saveAction == "confirmLocation") {

				c.received();

			} else {

				c.insertItems(saveAction);

			}

		}

	}

	c.sendNotifications = function() {

		//generateQR("First QR Code Test");

		//generateQR("Second QR Code Test");

		c.server.get({

			action: "sendNotifications"

		}).then(function(rsp) {

			console.log(rsp.data.sendNotificationArr);

			var deliveryArr = rsp.data.sendNotificationArr;
			//c.generateQRCode(deliveryArr);
			c.generateQRCode(deliveryArr,0);
			//for (var i=0; i< rsp.data.sendNotificationArr.length; i++) {


			//c.generateQRCode(rsp.data.sendNotificationArr);

			//for (var i=0; i< rsp.data.sendNotificationArr.length; i++) {

			//c.generateQRCode(rsp.data.sendNotificationArr);
			//c.generateQRCode(rsp.data.sendNotificationArr[i]);

			//}

			//}

			/*for (var i=0; i< rsp.data.sendNotificationArr.length; i++) {

				var dataURL = ''
				c.data.dataURL = '';
				var code = generateQR(rsp.data.sendNotificationArr[i]);
				var qrcode = '';
				var img = '';

			}*/

			/*var modalReturnObj = {

				"modalAction" : "sendNotifications"

			}

			delitemModalPubSub.publish(modalReturnObj);*/

		})

	}

	/*delitemModalPubSub.subscribe($scope, function($event, data) {//Subscription to Angular Provider to retrieve data from Modal and update relevant variables

			console.log(data);

		c.modalInstance.close();

	})*/

	/*c.generateQRCode = function(sys_ids) {

		spModal.open({
			widget: 'delitem_generate_qr_code', 
			widgetInput: {
				sys_id: sys_ids
			}
		}).then(function () {

			alert("Test");

		})*/

	delitemModalPubSub.subscribe($scope, function($event, data) {//Subscription to Angular Provider to retrieve data from Modal and update relevant variables

		c.modalInstance.close();

	});


	// - Working 2 functions!
	// Define a function to process each item with a callback when done
	function processItem(sys_id, callback) {
		// Simulate async processing (e.g., fetching data from an API)

		/*	widgetInput = {
				sys_id: sys_id
			};

		c.modalInstance = $uibModal.open({

			templateUrl: 'delitem-new-delivery-custom-form-overlay.html',
			size: 'lg',
			backdrop: 'static',
			controllerAs: 'modalC',
			controller: function() {

				var modalC = this;
				modalC.modalInstance = c.modalInstance;
				modalC.title = 'title';
				spUtil.get('delitem_generate_qr_code',widgetInput).then(function(response) {

					modalC.widget = response;

				})

			}	

		})*/

		spModal.open({
			widget: 'delitem_generate_qr_code', 
			widgetInput: {
				sys_id: sys_id
			}
		}).then(function () {

			callback(); // Call the callback when processing is done

		})
		console.log('Processed item:', sys_id);


	}

	c.generateQRCode = function(sys_ids, index) {

		// Define a function to iterate through items sequentially
		if (index < sys_ids.length) {
			processItem(sys_ids[index], function () {
				c.generateQRCode(sys_ids, index + 1); // Recursively call with the next index
			});
		} else {
			console.log('All items processed.');
		}



		/*console.log("this is from new del: " + sys_id);
		spModal.open({
			widget: 'delitem_generate_qr_code', 
			widgetInput: {
				sys_id: sys_id
			}
		}).then(function () {

			alert("Test");

		})*/

		//modalObj = {
		//	sys_id: sys_id
		//}

		//c.modalInstance = $uibModal.open({

		//templateUrl: 'delitem-new-delivery-custom-form-overlay.html',
		//size: 'lg',
		//controllerAs: 'modalC',
		//controller: function() {

		//var modalC = this;
		//modalC.modalInstance = c.modalInstance;
		//modalC.title = 'Generating QR Code';
		//spUtil.get('delitem_generate_qr_code',modalObj).then(function(response) {

		//modalC.widget = response;

		//})

		//}	

		//})

	}

	//function generateQR(sys_id) {
	/*c.generateQRCode = function(sys_id) {
		console.log("This is from QR Code: " + sys_id);
		dataURL = '';
	//	qrcode = "";
		var canvas = "";
		console.log(sys_id);

		qrcode = new QRCode(document.getElementById('qrcode'), {

			text: sys_id,
			width: 128,
			height: 128,
			colorDark : "#000000",
			colorLight : "#ffffff",
			correctLevel : QRCode.CorrectLevel.H

		});
		console.log(qrcode);
		img = qrcode._el.children[1];

		canvas = document.createElement("canvas");
		canvas.width = img.width;
		canvas.height = img.height;

		// Copy the image contents to the canvas
		var ctx = canvas.getContext("2d");
		ctx.drawImage(img, 0, 0);

		dataURL = canvas.toDataURL("image/png");

		console.log(dataURL);

	}*/

	spUtil.recordWatch($scope, c.data.delieveryItemTable, c.data.newDeliveryFilter, function(name,data) {

		c.server.get({

			action: "refreshNewDeliveries"

		}).then(function(rsp) {

			c.data.newDeliveryGRSArr = rsp.data.newDeliveryGRSArr;

			if(c.data.newDeliveryGRSArr.length > 0) {

				c.data.disabled = false;

			} else {

				c.data.disabled = true;

			}

		})

		/*if(name.data.operation == "insert"){

			c.data.disabled = false;

		} else if(name.data.action == "exit") {

			c.data.disabled = true;

		}*/

	});

	c.addDeliveryItem = function() {
		c.data.recipient = {displayValue: '',value: ''};
		c.data.collectionLocation = '';
		c.data.showItemForm = true;
		c.data.singleItem = true;
		c.data.multipleItems = false;

	}

	c.addMultipleItems = function() {
		c.data.recipient = {displayValue: '',value: ''};
		c.data.collectionLocation = '';
		c.data.showItemForm = true;
		c.data.multipleItems = true;
		c.data.singleItem = false;

	}

	c.cancelForm = function() {

		c.data.showItemForm = false;
		c.data.showLocationUpdate = false;

	}

	c.confirmCollectionLocation = function(delivery) {
		console.log(delivery);
		c.data.showLocationUpdate = true;
		c.data.deliveryItemSysId = delivery.sys_id;
		c.data.expectedItemRecipient = delivery.recipient_first_name

	}

	c.received = function() {

		c.server.get({

			action: "itemReceived",
			collectionLocation: c.data.collectionLocation,
			notes: c.data.notes,
			item: c.data.deliveryItemSysId						

		}).then(function(rsp) {

			c.data.showLocationUpdate = false;
			c.data.collectionLocation = '';

		})

	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>body {
  font: 16px Arial;  
}

.btn{
	margin: 5px;
}

textarea {
  resize: none;
}
.autocomplete {
  position: relative;
}

.mandatory{
	color: #ff0000;
}

.mandatory-filled{
	color: #808080;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

.autocomplete-active {
  background-color: $brand-primary !important; 
  color: #ffffff; 
}

.glyphicon-menu-hamburger{
	display: none;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  z-index: 99;
  top: 100%;
  left: 0;
  right: 0;
  
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;	
  background-color: #fff;
}

.autocomplete-items div:hover {
  background-color: #e9e9e9;
}

.autocomplete-active {
  background-color: $brand-primary !important; 
  color: #ffffff; 
}

.autocomplete {
  position: relative;  
}

.qrcode{
	display: none;
}

.containerQRCode,.containerLoader, .message{
	text-align: center;
}

.expectedPanel{
	margin-top: 10px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>new_delivery</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
	autocomplete = function(inp, arr) {
		
		var currentFocus;
		
		inp.addEventListener("input", function(e) {
	
			var a, b, i, val = this.value;
		
			closeAllLists();
			if (!val) {
			
				return false;
			
			}
			
			currentFocus = -1;
			
			a = document.createElement("DIV");
			a.setAttribute("id", this.id + "autocomplete-list");
			a.setAttribute("class", "autocomplete-items");
			
			this.parentNode.appendChild(a);
			
			for (i = 0; i < arr.length; i++) {
			
				if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
				
					b = document.createElement("DIV");
					
					b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
					b.innerHTML += arr[i].substr(val.length);
					
					b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
					b.addEventListener("click", function(e) {
						
						inp.value = this.getElementsByTagName("input")[0].value;
						closeAllLists();
						
					});
					
					a.appendChild(b);
				
				}
			
			}
		
		});

		inp.addEventListener("keydown", function(e) {
			
			var x = document.getElementById(this.id + "autocomplete-list");
			
			if (x) {
				
				x = x.getElementsByTagName("div");
				
			}
			
			if (e.keyCode == 40) {
			
				currentFocus++;
				addActive(x);
				
			} else if (e.keyCode == 38) {
				
				currentFocus--;
				addActive(x);
				
			} else if (e.keyCode == 13) {
				
				e.preventDefault();
				
				if (currentFocus > -1) {
					
					if (x) {
						
						x[currentFocus].click();
						
					}
					
				}
				
			}
			
		});
		
		function addActive(x) {
			
			if (!x) {
				
				return false;
				
			}
			
			removeActive(x);
			
			if (currentFocus >= x.length) {
				
				currentFocus = 0;
				
			}
			
			if (currentFocus < 0) {
				
				currentFocus = (x.length - 1);
				
			}
			
			x[currentFocus].classList.add("autocomplete-active");
			
		}
		
		function removeActive(x) {
		
			for (var i = 0; i < x.length; i++) {
			
				x[i].classList.remove("autocomplete-active");
			
			}
		
		}
		
		function closeAllLists(elmnt) {
		
			var x = document.getElementsByClassName("autocomplete-items");
			
			for (var i = 0; i < x.length; i++) {
			
				if (elmnt != x[i] && elmnt != inp) {
				
					x[i].parentNode.removeChild(x[i]);
			
				}
			
			}
			
		}
		
		document.addEventListener("click", function (e) {
		
			closeAllLists(e.target);
		
		});
	
	}

	autocomplete(document.getElementById("autoCompleteInput"), scope.data.autoCompleteArr);
	
}]]></link>
        <name>New Delivery</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	queryNewDeliveries = function() {

		data.newExpectedDeliveryFilter = "state=" + DelItemConstants.NEW + "^NQstate=" + DelItemConstants.EXPECTED + "^date_expectedONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()";
		//data.newExpectedDeliveryFilter = "stateI=" + DelItemConstants.EXPECTED;
		data.newDeliveryFilter = "stateIN" + DelItemConstants.NEW;
		
		var newDeliveryGRSObj = {};
		data.newDeliveryGRSArr = [];
		data.newDeliveryFieldsArr = [];
		
		var newDeliveryGRS = new GlideRecordSecure(DelItemConstants.DELIVERY_ITEM_TABLE);
		newDeliveryGRS.addEncodedQuery(data.newExpectedDeliveryFilter);		
		newDeliveryGRS.query();
		while(newDeliveryGRS.next()) {
			
			newDeliveryGRSObj = {};
			newDeliveryGRSObj.date_received = { "fieldName" : "Date Received" , "value" : newDeliveryGRS.date_received.toString() , "display" : true };
			newDeliveryGRSObj.date_expected = { "fieldName" : "Date Expected" , "value" : newDeliveryGRS.date_expected.toString() , "display" : true };
			newDeliveryGRSObj.recipient = { "fieldName" : "Recipient" , "value" : newDeliveryGRS.recipient.getDisplayValue() , "display" : true };
			newDeliveryGRSObj.recipient_first_name = newDeliveryGRS.recipient.first_name.toString();
			newDeliveryGRSObj.sender = { "fieldName" : "Sender" , "value" : newDeliveryGRS.sender.toString() || "N/A", "display" : true };
			newDeliveryGRSObj.collection_location = { "fieldName" : "Collection Location" , "value" : newDeliveryGRS.collection_location.toString() || "N/A", "display" : true };
			newDeliveryGRSObj.notes = { "fieldName" : "Notes" , "value" : newDeliveryGRS.notes.toString() || "N/A" , "display" : true };
			newDeliveryGRSObj.state = { "fieldName" : "State" , "value" : newDeliveryGRS.state.getDisplayValue() , "display" : true };
			newDeliveryGRSObj.sys_id = newDeliveryGRS.getUniqueValue();
			data.newDeliveryGRSArr.push(newDeliveryGRSObj);			
	
			data.newDeliveryFieldsArr = [newDeliveryGRS.date_received.getLabel(),newDeliveryGRS.recipient.getLabel(),newDeliveryGRS.sender.getLabel(),newDeliveryGRS.collection_location.getLabel(),newDeliveryGRS.notes.getLabel(),newDeliveryGRS.state.getLabel()];
	
			
		}
		
	}
	
	
	if(!input) {
		
		queryNewDeliveries();
		
	}
	
	if(input && input.action == "refreshNewDeliveries") {

		queryNewDeliveries();
		
	}

	data.delieveryItemTable = DelItemConstants.DELIVERY_ITEM_TABLE;
	data.collectionLocations = gs.getProperty("x_187394_delitem.collection.locations");
	data.collectionLocationsArr = data.collectionLocations.split(",");
	
	/*data.tableOptions = {

		"table": "x_187394_delitem_delivery_item",
		"useInstanceTitle":false,
		"filter": data.newDeliveryFilter,
		"fields": "date_received,recipient,sender,collection_location,notes,state",
		"window_size": 5

	};*/

	var newDeliveries = new GlideAggregate(data.delieveryItemTable);
	newDeliveries.addEncodedQuery(data.newDeliveryFilter);
	newDeliveries.addAggregate('COUNT');
	newDeliveries.query();
	while(newDeliveries.next()) {

		data.newDeliveryCount = newDeliveries.getAggregate('COUNT');

	}

	data.sendersArr = [];

	var senders = new GlideRecordSecure(data.delieveryItemTable);
	senders.query();
	while (senders.next()) {

		data.sendersArr.push(senders.sender.toString());

	}

	var arrayUtil = new global.ArrayUtil();
	data.sendersUniqueArr = arrayUtil.unique(data.sendersArr);	

	data.autoCompleteArr = data.sendersUniqueArr;
	data.field_label = "Sender (if applicable)";
	data.placeholder = "i.e. ASOS"

	if(input && input.action == "insertDeliveryItem") {

		var newDeliveryItem = new x_187394_delitem.DelitemUtils().addDeliveryItem(input);

	}

	if(input && input.action == "insertMultipleDeliveryItems") {

		var newDeliveryItems = new x_187394_delitem.DelitemUtils().addMultipleDeliveryItem(input);

	}
	
	if(input && input.action == "itemReceived") {
		
		var updateExpectedDelivery = new x_187394_delitem.DelitemUtils().updateExpectedDelivery(input);
		
	}
	
	if(input && input.action == "sendNotifications") {

		data.sendNotificationArr = new x_187394_delitem.DelitemUtils().sendNotifications();
		gs.error("JW Debug sendNotificationArr: " + JSON.stringify(data.sendNotificationArr));

	}


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-23 16:32:41</sys_created_on>
        <sys_id>e32d3c882f4ce110758993acf699b695</sys_id>
        <sys_mod_count>191</sys_mod_count>
        <sys_name>New Delivery</sys_name>
        <sys_package display_value="Delitem" source="x_187394_delitem">ac22a5c32f771110758993acf699b6da</sys_package>
        <sys_policy/>
        <sys_scope display_value="Delitem">ac22a5c32f771110758993acf699b6da</sys_scope>
        <sys_update_name>sp_widget_e32d3c882f4ce110758993acf699b695</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-29 11:25:26</sys_updated_on>
        <template><![CDATA[<div class="containerQRCode">
  <div class="qrcode" id="qrcode">
    <canvas id="canvas" width="200" height="200"></canvas>
  </div>
</div>
<div>
  <!--<widget id="widget-data-table" options='data.tableOptions'></widget>-->
  <div class="alert alert-info" ng-show="!data.newDeliveryGRSArr.length">
    There are currently no New or Expected Delivery Items
  </div>
  <div class="panel panel-default"
       ng-show="data.newDeliveryGRSArr.length">
    <table class="table table-striped table-primary table-responsive">
      <thead>
        <tr>
          <th class="itemData">Recipient</th>
          <th class="itemData">Date Received/Expected</th>
          <!--<th class="itemData"
              ng-show="delivery.state.value == 'Expected'">Date Expected</th>-->
          <th class="itemData">Sender</th>
          <th class="itemData">Collection Location</th>
          <th class="itemData">Notes</th>
          <th class="itemData">State</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="delivery in c.data.newDeliveryGRSArr">
          <td class="itemData">{{delivery.recipient.value}}</td>
          <td class="itemData"
              ng-show="delivery.state.value != 'Expected'">{{delivery.date_received.value}}</td>
          <td class="itemData"
              ng-show="delivery.state.value == 'Expected'">{{delivery.date_expected.value}}</td>
          <td class="itemData">{{delivery.sender.value}}</td>
          <td class="itemData">{{delivery.collection_location.value}}</td>
          <td class="itemData">{{delivery.notes.value}}</td>
          <td class="itemData">{{delivery.state.value}}</td>
          <td class="itemData">
            <div class="btn-group"
                 ng-show="delivery.state.value == 'Expected'"
                 ng-click="c.confirmCollectionLocation(delivery)">
              <button class="btn btn-sm btn-primary">
                Received
              </button>
            </div>
            <div class="btn-group"
                 ng-click="c.editForm(delivery)">			
              <button class="btn btn-sm">
                <i class="fa fa-pencil" aria-hidden="true"></i>
              </button>
            </div>
            <div class="btn-group"
                 ng-click="c.confirmCollectionLocation(delivery)">			
              <button class="btn btn-sm btn-danger">
                <i class="fa fa-trash" aria-hidden="true"></i>
              </button>
            </div>
          </td>
        </tr>
    </table>
  </div>
  <div class="btn-group btn-group-justified"
       ng-show="!c.data.showLocationUpdate">
    <div class="btn-group">
      <button type="button" class="btn btn-default" ng-click="c.addDeliveryItem()">
        <span class="hidden-xs">
          Add Item
        </span>
        <i class="fa fa-shopping-basket fa-lg" aria-hidden="true"></i>
      </button>
    </div>
    <div class="btn-group">
      <button type="button" class="btn btn-default" ng-click="c.addMultipleItems()">
        <span class="hidden-xs">
          Add Multiple Items
        </span>
        <i class="fa fa-shopping-cart fa-lg" aria-hidden="true"></i>
      </button>
    </div>
    <div class="btn-group">
      <button type="button" class="btn btn-primary" ng-disabled="c.data.disabled" ng-click="c.sendNotifications()">
        <span class="hidden-xs">
          Send Notifications
        </span>
        <i class="fa fa-send-o fa-lg fa-fw"></i></button>
    </div>
  </div>
</div>
<div class="panel panel-default"
     ng-show="c.data.showItemForm">
  <div class="panel-body">
    <div class="alert alert-danger alert-dismissible"
         ng-show="c.data.showError">
      <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
      <i class="fa fa-exclamation-triangle"></i> Some fields are missing: {{c.data.missingFieldsError}}
    </div>
    <form autocomplete="off"> 
      <div class="form-group">
        <span style="padding-right: .25em" title="Mandatory" class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': recipient.displayValue != undefined}"></span>
        <label for="formGroupExampleInput">Recipient</label>
        <sn-record-picker field="c.data.recipient"
                          table="'sys_user'" 
                          display-field="'name'" 
                          value-field="'sys_id'" 
                          search-fields="'name'" 
                          page-size="100"
                          id="recordPickerSingle"
                          multiple=false
                          autofocus
                          ng-show="c.data.multipleItems==false">
        </sn-record-picker>
        <sn-record-picker field="c.data.recipient"
                          table="'sys_user'" 
                          display-field="'name'" 
                          value-field="'sys_id'" 
                          search-fields="'name'" 
                          page-size="100"
                          id="recordPickerMultiple"
                          multiple=true
                          autofocus
                          ng-show="c.data.multipleItems==true">
        </sn-record-picker>
      </div>
      <div class="autocomplete form-group"
           ng-show="!c.data.multipleItems">
        <label for="autoCompleteInput"
               id="autoCompleteInputLabel"
               name="autoCompleteInputLabel">
          {{c.data.field_label}}
        </label> 
        <input id="autoCompleteInput"
               name="autoCompleteInput"
               type="text"
               ng-model="c.data.senderAutoComplete"
               class="form-control"
               placeholder="{{c.data.placeholder}}">
      </div>
      <div class="form-group">
        <span style="padding-right: .25em" title="Mandatory" class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': collectionLocation.displayValue != undefined}"></span>
        <label for="formGroupExampleInput">Collection Location</label> 
        <select class="form-control" ng-model="c.data.collectionLocation" ng-options="item for item in c.data.collectionLocationsArr"></select>
      </div>
      <div class="form-group" ng-if="!c.data.multipleItems">
        <label for="formGroupExampleInput">Notes</label> 
        <textarea class="form-control"
                  ng-model="c.data.notes"
                  placeholder="Add any additional information about Delivery Item"
                  rows="2"
                  required="true"
                  type="text"></textarea>
      </div>
    </form>
    <button class="btn btn-default" ng-click="c.cancelForm()">
      Cancel
    </button>
    <button class="btn btn-primary pull-right" ng-click="c.saveItem('saveAndClose')">
      Save &amp Close
    </button>
    <button class="btn btn-primary pull-right" ng-click="c.saveItem('saveAndAdd')">
      Save &amp Add Item
    </button>
  </div>
</div>
<div class="panel panel-default expectedPanel"
     ng-show="c.data.showLocationUpdate">
  <div class="panel-heading">
    <h5>
      Confirm the collection location for {{c.data.expectedItemRecipient}}'s delivery item:
    </h5>
  </div>  
  <div class="panel-body">
    <div class="alert alert-danger alert-dismissible"
         ng-show="c.data.showError">
      <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
      <i class="fa fa-exclamation-triangle"></i> Some fields are missing: {{c.data.missingFieldsError}}
    </div>
    <div class="form-group">
      <span style="padding-right: .25em" title="Mandatory" class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': collectionLocation.displayValue != undefined}"></span>
      <label for="formGroupExampleInput">Collection Location</label> 
      <select class="form-control" ng-model="c.data.collectionLocation" ng-options="item for item in c.data.collectionLocationsArr"></select>
    </div>
    <div class="form-group">
        <label for="formGroupExampleInput">Notes</label> 
        <textarea class="form-control"
                  ng-model="c.data.notes"
                  placeholder="Add any additional information about Delivery Item"
                  rows="2"
                  required="true"
                  type="text"></textarea>
      </div>
    <button class="btn btn-default" ng-click="c.cancelForm()">
      Cancel
    </button>
    <button class="btn btn-primary pull-right"
            ng-click="c.saveItem('confirmLocation')">
      Confirm Receipt
    </button>
  </div>
</div>
<div ng-show="c.data.showQR">
  <sp-widget widget="c.generateQRCodeWidget"></sp-widget>
</div>]]></template>
    </sp_widget>
</record_update>
