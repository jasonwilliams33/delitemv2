<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,spUtil,$timeout) {
	/* widget controller */
	var c = this;

	c.data.singleItem = false;
	c.data.multipleItems = true;
	c.data.showItemForm = false;

	if(c.data.newDeliveryCount > 0) {

		c.data.disabled = false;

	} else {

		c.data.disabled = true;

	}

	c.insertItems = function(saveAction) {
		console.log(c.data.recipient.value.split(','));
		c.data.itemCount = c.data.recipient.value.split(',').length;
		
		if(c.data.itemCount > 1) {
			
			c.data.action = "insertMultipleDeliveryItems"
			
		} else {
			
			c.data.action = "insertDeliveryItem"
			
		}
		
		c.server.get({

			action: c.data.action,
			recipient: c.data.recipient,
			sender: c.data.senderAutoComplete,
			collection_location: c.data.collectionLocation,
			notes: c.data.notes			

		}).then(function(rsp) {

			c.data.recipient = {displayValue: '',value: ''};
			c.data.senderAutoComplete = '';
			c.data.collectionLocation = '';
			c.data.notes = '';

			if(saveAction == 'saveAndClose') {

				c.data.showItemForm = false

			}

		})

	}

	c.saveItem = function(saveAction) {

		if(c.data.recipient.value == undefined || c.data.recipient.value == '') {

			c.data.showError = true;

			$timeout(function() {

				c.data.showError = false;

			},3000);

			return;

		} else {

			c.insertItems(saveAction);

		}		

	}

	c.sendNotifications = function(){
		
		c.server.get({

			action: sendNotifications
			
		}).then(function(rsp) {

		})
	}
	
	spUtil.recordWatch($scope, c.data.delieveryItemTable, c.data.newDeliveryFilter, function(name,data) {
		if(name.data.operation == "insert"){
			c.data.disabled = false;							
		}else if(name.data.action == "exit"){
			c.data.disabled = true;
		}
	});

	c.addDeliveryItem = function() {
		c.data.recipient = {displayValue: '',value: ''};
		c.data.collectionLocation = '';
		c.data.showItemForm = true;
		c.data.singleItem = true;
		c.data.multipleItems = false;

	}

	c.addMultipleItems = function() {
		c.data.recipient = {displayValue: '',value: ''};
		c.data.collectionLocation = '';
		c.data.showItemForm = true;
		c.data.multipleItems = true;
		c.data.singleItem = false;

	}

	c.cancelForm = function() {

		c.data.showItemForm = false;

	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>body {
  font: 16px Arial;  
}

.btn{
	margin: 5px;
}

textarea {
  resize: none;
}
.autocomplete {
  position: relative;
}

.mandatory{
	color: #ff0000;
}

.mandatory-filled{
	color: #808080;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

.autocomplete-active {
  background-color: $brand-primary !important; 
  color: #ffffff; 
}

.glyphicon-menu-hamburger{
	display: none;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  z-index: 99;
  top: 100%;
  left: 0;
  right: 0;
  
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;	
  background-color: #fff;
}

.autocomplete-items div:hover {
  background-color: #e9e9e9;
}

.autocomplete-active {
  background-color: $brand-primary !important; 
  color: #ffffff; 
}

.autocomplete {
  position: relative;  
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>new_delivery</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
	autocomplete = function(inp, arr) {
		
		var currentFocus;
		
		inp.addEventListener("input", function(e) {
	
			var a, b, i, val = this.value;
		
			closeAllLists();
			if (!val) {
			
				return false;
			
			}
			
			currentFocus = -1;
			
			a = document.createElement("DIV");
			a.setAttribute("id", this.id + "autocomplete-list");
			a.setAttribute("class", "autocomplete-items");
			
			this.parentNode.appendChild(a);
			
			for (i = 0; i < arr.length; i++) {
			
				if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
				
					b = document.createElement("DIV");
					
					b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
					b.innerHTML += arr[i].substr(val.length);
					
					b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
					b.addEventListener("click", function(e) {
						
						inp.value = this.getElementsByTagName("input")[0].value;
						closeAllLists();
						
					});
					
					a.appendChild(b);
				
				}
			
			}
		
		});

		inp.addEventListener("keydown", function(e) {
			
			var x = document.getElementById(this.id + "autocomplete-list");
			
			if (x) {
				
				x = x.getElementsByTagName("div");
				
			}
			
			if (e.keyCode == 40) {
			
				currentFocus++;
				addActive(x);
				
			} else if (e.keyCode == 38) {
				
				currentFocus--;
				addActive(x);
				
			} else if (e.keyCode == 13) {
				
				e.preventDefault();
				
				if (currentFocus > -1) {
					
					if (x) {
						
						x[currentFocus].click();
						
					}
					
				}
				
			}
			
		});
		
		function addActive(x) {
			
			if (!x) {
				
				return false;
				
			}
			
			removeActive(x);
			
			if (currentFocus >= x.length) {
				
				currentFocus = 0;
				
			}
			
			if (currentFocus < 0) {
				
				currentFocus = (x.length - 1);
				
			}
			
			x[currentFocus].classList.add("autocomplete-active");
			
		}
		
		function removeActive(x) {
		
			for (var i = 0; i < x.length; i++) {
			
				x[i].classList.remove("autocomplete-active");
			
			}
		
		}
		
		function closeAllLists(elmnt) {
		
			var x = document.getElementsByClassName("autocomplete-items");
			
			for (var i = 0; i < x.length; i++) {
			
				if (elmnt != x[i] && elmnt != inp) {
				
					x[i].parentNode.removeChild(x[i]);
			
				}
			
			}
			
		}
		
		document.addEventListener("click", function (e) {
		
			closeAllLists(e.target);
		
		});
	
	}

	autocomplete(document.getElementById("autoCompleteInput"), scope.data.autoCompleteArr);
	
}]]></link>
        <name>New Delivery</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	data.newDeliveryFilter = "state=1";
	data.delieveryItemTable = DelItemConstants.DELIVERY_ITEM_TABLE;
	data.collectionLocations = gs.getProperty("x_187394_delitem.collection.locations");
	data.collectionLocationsArr = data.collectionLocations.split(",");
	data.sender = 'test shared var';

	data.tableOptions = {

		"table": "x_187394_delitem_delivery_item",
		"table_plural":"Test",
		"useInstanceTitle":false,
		"filter": data.newDeliveryFilter,
		"fields": "date_received,recipient,sender,collection_location,notes,state",
		"window_size": 5

	};

	var newDeliveries = new GlideAggregate(data.delieveryItemTable);
	newDeliveries.addEncodedQuery(data.newDeliveryFilter);
	newDeliveries.addAggregate('COUNT');
	newDeliveries.query();
	while(newDeliveries.next()) {

		data.newDeliveryCount = newDeliveries.getAggregate('COUNT');

	}

	data.sendersArr = [];

	var senders = new GlideRecordSecure(data.delieveryItemTable);
	senders.query();
	while (senders.next()) {

		data.sendersArr.push(senders.sender.toString());

	}

	var arrayUtil = new global.ArrayUtil();
	data.sendersUniqueArr = arrayUtil.unique(data.sendersArr);	

	data.autoCompleteArr = data.sendersUniqueArr;
	data.field_label = "Sender (if applicable)";
	data.placeholder = "i.e. ASOS"

	if(input && input.action == "insertDeliveryItem") {

		var newDeliveryItem = new x_187394_delitem.DelitemUtils().addDeliveryItem(input);

	}

	if(input && input.action == "insertMultipleDeliveryItems") {

		var newDeliveryItems = new x_187394_delitem.DelitemUtils().addMultipleDeliveryItem(input);

	}
	
	if(input && input.action == "sendNotifications") {

		var sendNotifications = new x_187394_delitem.DelitemUtils().sendNotifications();

	}


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-23 16:32:41</sys_created_on>
        <sys_id>e32d3c882f4ce110758993acf699b695</sys_id>
        <sys_name>New Delivery</sys_name>
        <sys_package display_value="Delitem" source="x_187394_delitem">ac22a5c32f771110758993acf699b6da</sys_package>
        <sys_policy/>
        <sys_scope display_value="Delitem">ac22a5c32f771110758993acf699b6da</sys_scope>
        <sys_update_name>sp_widget_e32d3c882f4ce110758993acf699b695</sys_update_name>
        <template><![CDATA[<div>
  <widget id="widget-data-table" options='data.tableOptions'></widget>
  <div class="btn-group btn-group-justified">
    <div class="btn-group">
      <button type="button" class="btn btn-default" ng-click="c.addDeliveryItem()">Add Delivery Item  <i class="fa fa-shopping-basket fa-lg" aria-hidden="true"></i>
      </button>
    </div>
    <div class="btn-group">
      <button type="button" class="btn btn-default" ng-click="c.addMultipleItems()">Add Multiple Delivery Items  <i class="fa fa-shopping-cart fa-lg" aria-hidden="true"></i>
      </button>
    </div>
    <div class="btn-group">
      <button type="button" class="btn btn-primary" ng-disabled="c.data.disabled" ng-click="c.sendNotifications()">Send Notifications  <i class="fa fa-send-o fa-lg fa-fw"></i></button>
    </div>
  </div>

</div>

<div class="panel panel-default"
     ng-show="c.data.showItemForm">
  <div class="panel-body">
    <div class="alert alert-danger alert-dismissible"
         ng-show="c.data.showError">
      <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
      <i class="fa fa-exclamation-triangle"></i> Some fields are missing: Recipient
    </div>
    <form autocomplete="off"> 

      <div class="form-group"> <span style="padding-right: .25em" title="Mandatory" class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': recipient.displayValue != undefined}"></span>
        <label for="formGroupExampleInput">Recipient</label>

        <sn-record-picker field="c.data.recipient"
                          table="'sys_user'" 
                          display-field="'name'" 
                          value-field="'sys_id'" 
                          search-fields="'name'" 
                          page-size="100"
                          id="recordPickerSingle"
                          multiple=false
                          autofocus
                          ng-show="c.data.multipleItems==false">
        </sn-record-picker>

        <sn-record-picker field="c.data.recipient"
                          table="'sys_user'" 
                          display-field="'name'" 
                          value-field="'sys_id'" 
                          search-fields="'name'" 
                          page-size="100"
                          id="recordPickerMultiple"
                          multiple=true
                          autofocus
                          ng-show="c.data.multipleItems==true">
        </sn-record-picker>

      </div>
      <!-- <div class="autocomplete form-group" ng-show="!c.data.multipleItems">
        <label for="formGroupExampleInput">Sender (if applicable)</label>
        <input id="myInput" type="text" ng-model="c.data.sender" class="form-control" name="myCountry" placeholder="i.e. Amazon">
      </div>
      <div ng-show="!c.data.multipleItems"
           ng-model="c.data.sender">
        <widget id="delitem_autocomplete_input" options='data.autoCompleteOptions'></widget>
      </div>-->
      <div class="autocomplete form-group"
           ng-show="!c.data.multipleItems">
        <label for="autoCompleteInput"
               id="autoCompleteInputLabel"
               name="autoCompleteInputLabel">
          {{c.data.field_label}}
        </label> 
        <input id="autoCompleteInput"
               name="autoCompleteInput"
               type="text"
               ng-model="c.data.senderAutoComplete"
               class="form-control"
               placeholder="{{c.data.placeholder}}">
      </div>
      <div class="form-group"> 
        <label for="formGroupExampleInput">Collection Location</label> 
        <select class="form-control" ng-model="c.data.collectionLocation" ng-options="item for item in c.data.collectionLocationsArr"></select>
      </div>
      <div class="form-group" ng-if="!c.data.multipleItems">
        <label for="formGroupExampleInput">Notes</label> 
        <textarea class="form-control"
                  ng-model="c.data.notes"
                  placeholder="Add any additional information about Delivery Item"
                  rows="2"
                  required="true"
                  type="text"></textarea>
      </div>
    </form>
    <button class="btn btn-default" ng-click="c.cancelForm()">
      Cancel
    </button>
    <button class="btn btn-primary pull-right" ng-click="c.saveItem('saveAndClose')">
      Save &amp Close
    </button>
    <button class="btn btn-primary pull-right" ng-click="c.saveItem('saveAndAdd')">
      Save &amp Add Item
    </button>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
